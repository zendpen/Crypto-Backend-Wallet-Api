{"version":3,"sources":["../src/constants.js"],"names":["generateProtocol","protocol","Error","protocolByte","Buffer","alloc","ID","SECP256K1","Actor","BLS","module","exports"],"mappings":"AAAA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,QAAQ,EAAI;AACnC,MAAIA,QAAQ,GAAG,CAAX,IAAgBA,QAAQ,GAAG,CAA/B,EAAkC,MAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AAClC,MAAMC,YAAY,GAAG,IAAIC,MAAM,CAACC,KAAX,CAAiB,CAAjB,CAArB;AACAF,EAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkBF,QAAlB;AAEA,SAAOE,YAAP;AACD,CAND;;AAQA,IAAMG,EAAE,GAAGN,gBAAgB,CAAC,CAAD,CAA3B;AACA,IAAMO,SAAS,GAAGP,gBAAgB,CAAC,CAAD,CAAlC;AACA,IAAMQ,KAAK,GAAGR,gBAAgB,CAAC,CAAD,CAA9B;AACA,IAAMS,GAAG,GAAGT,gBAAgB,CAAC,CAAD,CAA5B;AAEAU,MAAM,CAACC,OAAP,GAAiB;AACfL,EAAAA,EAAE,EAAFA,EADe;AAEfC,EAAAA,SAAS,EAATA,SAFe;AAGfC,EAAAA,KAAK,EAALA,KAHe;AAIfC,EAAAA,GAAG,EAAHA;AAJe,CAAjB","sourcesContent":["const generateProtocol = protocol => {\n  if (protocol < 0 || protocol > 3) throw new Error('Invalid protocol')\n  const protocolByte = new Buffer.alloc(1)\n  protocolByte[0] = protocol\n\n  return protocolByte\n}\n\nconst ID = generateProtocol(0)\nconst SECP256K1 = generateProtocol(1)\nconst Actor = generateProtocol(2)\nconst BLS = generateProtocol(3)\n\nmodule.exports = {\n  ID,\n  SECP256K1,\n  Actor,\n  BLS\n}\n"],"file":"constants.js"}