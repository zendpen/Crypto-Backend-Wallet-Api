{"version":3,"sources":["../src/index.js"],"names":["leb","require","blake2b","base32Function","base32","newAddress","newFromString","decode","encode","bigintToArray","getChecksum","validateChecksum","validateAddressString","checkAddressString","Address","str","length","Error","slice","v","tmp","BigInt","toString","Buffer","from","ingest","expect","digest","compare","protocol","payload","protocolByte","alloc","concat","address","network","raw","substring","unsigned","payloadChecksum","checksum","addressObj","addressString","String","bytes","string","error","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable radix,prefer-const */\nconst leb = require('leb128')\nconst { blake2b } = require('blakejs')\nconst base32Function = require('./base32')\n\nconst base32 = base32Function('abcdefghijklmnopqrstuvwxyz234567')\n\nlet newAddress\nlet newFromString\nlet decode\nlet encode\nlet bigintToArray\nlet getChecksum\nlet validateChecksum\nlet validateAddressString\nlet checkAddressString\n\nclass Address {\n  constructor(str) {\n    if (!str || str.length < 1) throw new Error('Missing str in address')\n    this.str = str\n  }\n\n  protocol = () => {\n    if (this.str.length < 1) {\n      return Error('No address found.')\n    }\n    return this.str[0]\n  }\n\n  payload = () => {\n    if (this.str.length < 1) {\n      return Error('No address found.')\n    }\n    return this.str.slice(1, this.str.length)\n  }\n}\n\nbigintToArray = v => {\n  // eslint-disable-next-line no-undef\n  let tmp = BigInt(v).toString(16)\n  if (tmp.length % 2 === 1) tmp = `0${tmp}`\n  return Buffer.from(tmp, 'hex')\n}\n\ngetChecksum = ingest => {\n  return blake2b(ingest, null, 4)\n}\n\nvalidateChecksum = (ingest, expect) => {\n  const digest = getChecksum(ingest)\n  return Buffer.compare(Buffer.from(digest), expect)\n}\n\nnewAddress = (protocol, payload) => {\n  const protocolByte = new Buffer.alloc(1)\n  protocolByte[0] = protocol\n\n  return new Address(Buffer.concat([protocolByte, payload]))\n}\n\ndecode = address => {\n  checkAddressString(address)\n\n  const network = address.slice(0, 1)\n  const protocol = address.slice(1, 2)\n  const protocolByte = new Buffer.alloc(1)\n  protocolByte[0] = protocol\n  const raw = address.substring(2, address.length)\n\n  if (protocol === '0') {\n    return newAddress(protocol, Buffer.from(leb.unsigned.encode(raw)))\n  }\n\n  const payloadChecksum = new Buffer.from(base32.decode(raw))\n  const { length } = payloadChecksum\n  const payload = payloadChecksum.slice(0, length - 4)\n  const checksum = payloadChecksum.slice(length - 4, length)\n  if (validateChecksum(Buffer.concat([protocolByte, payload]), checksum)) {\n    throw Error(\"Checksums don't match\")\n  }\n\n  const addressObj = newAddress(protocol, payload)\n  if (encode(network, addressObj) !== address)\n    throw Error(`Did not encode this address properly: ${address}`)\n\n  return addressObj\n}\n\nencode = (network, address) => {\n  if (!address || !address.str) throw Error('Invalid address')\n  let addressString = ''\n  const payload = address.payload()\n\n  switch (address.protocol()) {\n    case 0: {\n      addressString =\n        network +\n        String(address.protocol()) +\n        leb.unsigned.decode(address.payload())\n      break\n    }\n    default: {\n      const protocolByte = new Buffer.alloc(1)\n      protocolByte[0] = address.protocol()\n      const checksum = getChecksum(Buffer.concat([protocolByte, payload]))\n      const bytes = Buffer.concat([payload, Buffer.from(checksum)])\n      addressString =\n        String(network) + String(address.protocol()) + base32.encode(bytes)\n      break\n    }\n  }\n\n  return addressString\n}\n\nnewFromString = address => {\n  return decode(address)\n}\n\nvalidateAddressString = string => {\n  try {\n    checkAddressString(string)\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\ncheckAddressString = address => {\n  if (!address) throw Error('No bytes to validate.')\n  if (address.length < 3) throw Error('Address is too short to validate.')\n  if (address[0] !== 'f' && address[0] !== 't') {\n    throw Error('Unknown address network.')\n  }\n\n  switch (address[1]) {\n    case '0': {\n      if (address.length > 22) throw Error('Invalid ID address length.')\n      break\n    }\n    case '1': {\n      if (address.length !== 41)\n        throw Error('Invalid secp256k1 address length.')\n      break\n    }\n    case '2': {\n      if (address.length !== 41) throw Error('Invalid Actor address length.')\n      break\n    }\n    case '3': {\n      if (address.length !== 86) throw Error('Invalid BLS address length.')\n      break\n    }\n    default: {\n      throw new Error('Invalid address protocol.')\n    }\n  }\n}\n\nmodule.exports = {\n  Address,\n  newAddress,\n  newFromString,\n  bigintToArray,\n  decode,\n  encode,\n  getChecksum,\n  validateChecksum,\n  validateAddressString,\n  checkAddressString\n}\n"],"file":"index.js"}