"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.deleteHeaders = exports.throwIfErrors = exports.configureHeaders = exports.removeEmptyHeaders = void 0;

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const removeEmptyHeaders = headers => {
  const newHeaders = {};
  Object.keys(headers).forEach(key => {
    if (headers[key]) newHeaders[key] = headers[key];
  });
  return newHeaders;
};

exports.removeEmptyHeaders = removeEmptyHeaders;

const configureHeaders = (headers = {}, token) => {
  const reqHeaders = Object.assign({}, headers);
  return removeEmptyHeaders(_objectSpread({
    Accept: '*/*',
    Authorization: token ? `Bearer ${token}` : null
  }, reqHeaders));
};

exports.configureHeaders = configureHeaders;

const throwIfErrors = response => {
  if (response.error) {
    if (response.error.message) throw new Error(response.error.message);else throw new Error('Unknown jsonrpc error');
  } else {
    return response;
  }
};

exports.throwIfErrors = throwIfErrors;

const deleteHeaders = opts => {
  delete opts.headers;
  return opts;
};

exports.deleteHeaders = deleteHeaders;

class LotusRpcEngine {
  constructor(config) {
    var _config$axiosOpts;

    if (!config) throw new Error('Must pass a config object to the LotusRpcEngine constructor.');
    this.apiAddress = config.apiAddress || 'http://127.0.0.1:1234/rpc/v0';
    this.token = config.token;
    this.headers = configureHeaders(config === null || config === void 0 ? void 0 : (_config$axiosOpts = config.axiosOpts) === null || _config$axiosOpts === void 0 ? void 0 : _config$axiosOpts.headers, config.token);
    this.axiosOpts = deleteHeaders(config.axiosOpts || {});
  }

  request(method, ...params) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const {
        data
      } = yield _axios.default.post(_this.apiAddress, {
        jsonrpc: '2.0',
        method: `Filecoin.${method}`,
        params: params,
        id: 1
      }, _objectSpread({
        headers: _this.headers
      }, _this.axiosOpts));
      throwIfErrors(data);
      return data.result;
    })();
  }

}

var _default = LotusRpcEngine;
exports.default = _default;
//# sourceMappingURL=index.js.map