{"version":3,"sources":["../src/Converter.js"],"names":["bent","require","BigNumber","FilecoinNumber","Converter","constructor","currency","apiKey","apiURL","rate","convert","amount","toFIL","Error","filAmount","dividedBy","fromFIL","multipliedBy","from","to","get","res","data","quote","price","module","exports"],"mappings":";;;;;;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,kBAAD,CAA9B;;AAEA,MAAMG,SAAN,CAAgB;AACdC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAX,EAA+B;AAAA;;AAAA,gFAQpB,aAAY;AAChC,MAAA,KAAI,CAACC,IAAL,GAAY,IAAIP,SAAJ,OAAoB,KAAI,CAACQ,OAAL,CAAa,CAAb,EAAgB,KAAhB,EAAuB,KAAI,CAACJ,QAA5B,CAApB,CAAZ;AACD,KAVyC;;AAAA,mCAYlCK,MAAM,IAAI;AAChB,UAAI,CAACA,MAAL,EAAa,OAAO,KAAKC,KAAL,CAAW,GAAX,CAAP;;AACb,UAAI,CAAC,KAAKH,IAAV,EAAgB;AACd,cAAM,IAAII,KAAJ,CACJ,8EADI,CAAN;AAGD;;AACD,UACE,OAAOF,MAAP,KAAkB,QAAlB,IACA,OAAOA,MAAP,KAAkB,QADlB,IAEAA,MAAM,YAAYT,SAHpB,EAIE;AACA,cAAMY,SAAS,GAAG,IAAIZ,SAAJ,CAAcS,MAAd,EAAsBI,SAAtB,CAAgC,KAAKN,IAArC,CAAlB;AACA,eAAO,IAAIN,cAAJ,CAAmBW,SAAnB,EAA8B,KAA9B,CAAP;AACD;;AAED,YAAM,IAAID,KAAJ,CACJ,oEADI,CAAN;AAGD,KA/ByC;;AAAA,qCAiChCF,MAAM,IAAI;AAClB,UAAI,CAACA,MAAL,EAAa,OAAO,KAAKK,OAAL,CAAa,GAAb,CAAP;AACb,UAAI,CAAC,KAAKP,IAAV,EACE,MAAM,IAAII,KAAJ,CACJ,gFADI,CAAN;;AAIF,UACE,OAAOF,MAAP,KAAkB,QAAlB,IACA,OAAOA,MAAP,KAAkB,QADlB,IAEAA,MAAM,YAAYT,SAHpB,EAIE;AACA,eAAO,IAAIA,SAAJ,CAAcS,MAAd,EAAsBM,YAAtB,CAAmC,KAAKR,IAAxC,CAAP;AACD;;AAED,YAAM,IAAII,KAAJ,CACJ,qEADI,CAAN;AAGD,KAnDyC;;AAAA;AAAA,oCAqDhC,WAAOF,MAAP,EAAeO,IAAf,EAAqBC,EAArB,EAA4B;AACpC,cAAMC,GAAG,GAAGpB,IAAI,CAAC,KAAD,EAAQ,MAAR,EAAgB;AAC9B,+BAAqB,KAAI,CAACO;AADI,SAAhB,CAAhB;AAIA,cAAMc,GAAG,SAASD,GAAG,CAClB,GAAE,KAAI,CAACZ,MAAO,qCAAoCU,IAAK,WAAUP,MAAO,YAAWQ,EAAG,EADpE,CAArB;AAIA,YAAI,CAACE,GAAG,CAACC,IAAL,IAAa,CAACD,GAAG,CAACC,IAAJ,CAASC,KAAvB,IAAgC,CAACF,GAAG,CAACC,IAAJ,CAASC,KAAT,CAAeJ,EAAf,CAArC,EACE,MAAM,IAAIN,KAAJ,CAAU,4BAAV,CAAN;AAEF,eAAOQ,GAAG,CAACC,IAAJ,CAASC,KAAT,CAAeJ,EAAf,EAAmBK,KAA1B;AACD,OAlEyC;;AAAA;AAAA;AAAA;AAAA;;AAAA,qDAoEhB,MAAM,KAAKf,IApEK;;AACxC,QAAI,CAACH,QAAL,EAAe,MAAM,IAAIO,KAAJ,CAAU,qBAAV,CAAN;AACf,SAAKP,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAM,IAAI,EAAxB;AACA,SAAKC,MAAL,GAAcA,MAAM,IAAI,oCAAxB;AACA,SAAKC,IAAL,GAAY,IAAZ;AACD;;AAPa;;AAwEhBgB,MAAM,CAACC,OAAP,GAAiBtB,SAAjB","sourcesContent":["const bent = require('bent')\nconst BigNumber = require('bignumber.js')\nconst FilecoinNumber = require('./FilecoinNumber')\n\nclass Converter {\n  constructor(currency, { apiKey, apiURL }) {\n    if (!currency) throw new Error('No currency passed.')\n    this.currency = currency\n    this.apiKey = apiKey || ''\n    this.apiURL = apiURL || 'https://pro-api.coinmarketcap.com/'\n    this.rate = null\n  }\n\n  cacheConversionRate = async () => {\n    this.rate = new BigNumber(await this.convert(1, 'FIL', this.currency))\n  }\n\n  toFIL = amount => {\n    if (!amount) return this.toFIL('0')\n    if (!this.rate) {\n      throw new Error(\n        'Call cacheConversionRate() to get the conversion rate before calling .toFIL.',\n      )\n    }\n    if (\n      typeof amount === 'string' ||\n      typeof amount === 'number' ||\n      amount instanceof BigNumber\n    ) {\n      const filAmount = new BigNumber(amount).dividedBy(this.rate)\n      return new FilecoinNumber(filAmount, 'fil')\n    }\n\n    throw new Error(\n      'Amount passed must be a Number, String, or an instanceof BigNumber',\n    )\n  }\n\n  fromFIL = amount => {\n    if (!amount) return this.fromFIL('0')\n    if (!this.rate)\n      throw new Error(\n        'Call cacheConversionRate() to get the conversion rate before calling .fromFIL.',\n      )\n\n    if (\n      typeof amount === 'string' ||\n      typeof amount === 'number' ||\n      amount instanceof BigNumber\n    ) {\n      return new BigNumber(amount).multipliedBy(this.rate)\n    }\n\n    throw new Error(\n      'Amount passed must be a Number, String, or an instanceof BigNumber.',\n    )\n  }\n\n  convert = async (amount, from, to) => {\n    const get = bent('GET', 'json', {\n      'X-CMC_PRO_API_KEY': this.apiKey,\n    })\n\n    const res = await get(\n      `${this.apiURL}/v1/tools/price-conversion?symbol=${from}&amount=${amount}&convert=${to}`,\n    )\n\n    if (!res.data || !res.data.quote || !res.data.quote[to])\n      throw new Error('No conversion price found.')\n\n    return res.data.quote[to].price\n  }\n\n  getCachedConversionRate = () => this.rate\n}\n\nmodule.exports = Converter\n"],"file":"Converter.js"}