function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const bent = require('bent');

const BigNumber = require('bignumber.js');

const FilecoinNumber = require('./FilecoinNumber');

class Converter {
  constructor(currency, {
    apiKey,
    apiURL
  }) {
    var _this = this;

    _defineProperty(this, "cacheConversionRate", /*#__PURE__*/_asyncToGenerator(function* () {
      _this.rate = new BigNumber(yield _this.convert(1, 'FIL', _this.currency));
    }));

    _defineProperty(this, "toFIL", amount => {
      if (!amount) return this.toFIL('0');

      if (!this.rate) {
        throw new Error('Call cacheConversionRate() to get the conversion rate before calling .toFIL.');
      }

      if (typeof amount === 'string' || typeof amount === 'number' || amount instanceof BigNumber) {
        const filAmount = new BigNumber(amount).dividedBy(this.rate);
        return new FilecoinNumber(filAmount, 'fil');
      }

      throw new Error('Amount passed must be a Number, String, or an instanceof BigNumber');
    });

    _defineProperty(this, "fromFIL", amount => {
      if (!amount) return this.fromFIL('0');
      if (!this.rate) throw new Error('Call cacheConversionRate() to get the conversion rate before calling .fromFIL.');

      if (typeof amount === 'string' || typeof amount === 'number' || amount instanceof BigNumber) {
        return new BigNumber(amount).multipliedBy(this.rate);
      }

      throw new Error('Amount passed must be a Number, String, or an instanceof BigNumber.');
    });

    _defineProperty(this, "convert", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator(function* (amount, from, to) {
        const get = bent('GET', 'json', {
          'X-CMC_PRO_API_KEY': _this.apiKey
        });
        const res = yield get(`${_this.apiURL}/v1/tools/price-conversion?symbol=${from}&amount=${amount}&convert=${to}`);
        if (!res.data || !res.data.quote || !res.data.quote[to]) throw new Error('No conversion price found.');
        return res.data.quote[to].price;
      });

      return function (_x, _x2, _x3) {
        return _ref2.apply(this, arguments);
      };
    }());

    _defineProperty(this, "getCachedConversionRate", () => this.rate);

    if (!currency) throw new Error('No currency passed.');
    this.currency = currency;
    this.apiKey = apiKey || '';
    this.apiURL = apiURL || 'https://pro-api.coinmarketcap.com/';
    this.rate = null;
  }

}

module.exports = Converter;
//# sourceMappingURL=Converter.js.map