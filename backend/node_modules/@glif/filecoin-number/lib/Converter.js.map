{"version":3,"sources":["../src/Converter.js"],"names":["bent","require","BigNumber","FilecoinNumber","Converter","currency","apiKey","apiURL","convert","rate","amount","toFIL","Error","filAmount","dividedBy","fromFIL","multipliedBy","from","to","get","res","data","quote","price","module","exports"],"mappings":"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","sourcesContent":["const bent = require('bent')\nconst BigNumber = require('bignumber.js')\nconst FilecoinNumber = require('./FilecoinNumber')\n\nclass Converter {\n  constructor(currency, { apiKey, apiURL }) {\n    if (!currency) throw new Error('No currency passed.')\n    this.currency = currency\n    this.apiKey = apiKey || ''\n    this.apiURL = apiURL || 'https://pro-api.coinmarketcap.com/'\n    this.rate = null\n  }\n\n  cacheConversionRate = async () => {\n    this.rate = new BigNumber(await this.convert(1, 'FIL', this.currency))\n  }\n\n  toFIL = amount => {\n    if (!amount) return this.toFIL('0')\n    if (!this.rate) {\n      throw new Error(\n        'Call cacheConversionRate() to get the conversion rate before calling .toFIL.',\n      )\n    }\n    if (\n      typeof amount === 'string' ||\n      typeof amount === 'number' ||\n      amount instanceof BigNumber\n    ) {\n      const filAmount = new BigNumber(amount).dividedBy(this.rate)\n      return new FilecoinNumber(filAmount, 'fil')\n    }\n\n    throw new Error(\n      'Amount passed must be a Number, String, or an instanceof BigNumber',\n    )\n  }\n\n  fromFIL = amount => {\n    if (!amount) return this.fromFIL('0')\n    if (!this.rate)\n      throw new Error(\n        'Call cacheConversionRate() to get the conversion rate before calling .fromFIL.',\n      )\n\n    if (\n      typeof amount === 'string' ||\n      typeof amount === 'number' ||\n      amount instanceof BigNumber\n    ) {\n      return new BigNumber(amount).multipliedBy(this.rate)\n    }\n\n    throw new Error(\n      'Amount passed must be a Number, String, or an instanceof BigNumber.',\n    )\n  }\n\n  convert = async (amount, from, to) => {\n    const get = bent('GET', 'json', {\n      'X-CMC_PRO_API_KEY': this.apiKey,\n    })\n\n    const res = await get(\n      `${this.apiURL}/v1/tools/price-conversion?symbol=${from}&amount=${amount}&convert=${to}`,\n    )\n\n    if (!res.data || !res.data.quote || !res.data.quote[to])\n      throw new Error('No conversion price found.')\n\n    return res.data.quote[to].price\n  }\n\n  getCachedConversionRate = () => this.rate\n}\n\nmodule.exports = Converter\n"],"file":"Converter.js"}