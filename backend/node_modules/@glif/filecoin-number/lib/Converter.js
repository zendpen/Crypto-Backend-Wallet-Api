function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var bent = require('bent');

var BigNumber = require('bignumber.js');

var FilecoinNumber = require('./FilecoinNumber');

var Converter = function Converter(currency, _ref) {
  var _this = this;

  var apiKey = _ref.apiKey,
      apiURL = _ref.apiURL;

  _classCallCheck(this, Converter);

  _defineProperty(this, "cacheConversionRate", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.t0 = BigNumber;
            _context.next = 3;
            return _this.convert(1, 'FIL', _this.currency);

          case 3:
            _context.t1 = _context.sent;
            _this.rate = new _context.t0(_context.t1);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));

  _defineProperty(this, "toFIL", function (amount) {
    if (!amount) return _this.toFIL('0');

    if (!_this.rate) {
      throw new Error('Call cacheConversionRate() to get the conversion rate before calling .toFIL.');
    }

    if (typeof amount === 'string' || typeof amount === 'number' || amount instanceof BigNumber) {
      var filAmount = new BigNumber(amount).dividedBy(_this.rate);
      return new FilecoinNumber(filAmount, 'fil');
    }

    throw new Error('Amount passed must be a Number, String, or an instanceof BigNumber');
  });

  _defineProperty(this, "fromFIL", function (amount) {
    if (!amount) return _this.fromFIL('0');
    if (!_this.rate) throw new Error('Call cacheConversionRate() to get the conversion rate before calling .fromFIL.');

    if (typeof amount === 'string' || typeof amount === 'number' || amount instanceof BigNumber) {
      return new BigNumber(amount).multipliedBy(_this.rate);
    }

    throw new Error('Amount passed must be a Number, String, or an instanceof BigNumber.');
  });

  _defineProperty(this, "convert", /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(amount, from, to) {
      var get, res;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              get = bent('GET', 'json', {
                'X-CMC_PRO_API_KEY': _this.apiKey
              });
              _context2.next = 3;
              return get("".concat(_this.apiURL, "/v1/tools/price-conversion?symbol=").concat(from, "&amount=").concat(amount, "&convert=").concat(to));

            case 3:
              res = _context2.sent;

              if (!(!res.data || !res.data.quote || !res.data.quote[to])) {
                _context2.next = 6;
                break;
              }

              throw new Error('No conversion price found.');

            case 6:
              return _context2.abrupt("return", res.data.quote[to].price);

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x, _x2, _x3) {
      return _ref3.apply(this, arguments);
    };
  }());

  _defineProperty(this, "getCachedConversionRate", function () {
    return _this.rate;
  });

  if (!currency) throw new Error('No currency passed.');
  this.currency = currency;
  this.apiKey = apiKey || '';
  this.apiURL = apiURL || 'https://pro-api.coinmarketcap.com/';
  this.rate = null;
};

module.exports = Converter;
//# sourceMappingURL=Converter.js.map