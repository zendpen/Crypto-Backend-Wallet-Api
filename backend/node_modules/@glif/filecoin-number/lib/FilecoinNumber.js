function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BigNumber = require('bignumber.js'); // not sure how we want to configure rounding for this


BigNumber.set({
  ROUNDING_MODE: BigNumber.ROUND_HALF_DOWN
});
BigNumber.config({
  EXPONENTIAL_AT: 1e9
}); // stores filecoin numbers in denominations of Fil, not AttoFil

var FilecoinNumber = /*#__PURE__*/function (_BigNumber) {
  _inherits(FilecoinNumber, _BigNumber);

  var _super = _createSuper(FilecoinNumber);

  function FilecoinNumber(amount, denom) {
    var _this;

    _classCallCheck(this, FilecoinNumber);

    if (!denom) throw new Error('No Filecoin denomination passed in constructor.');
    var formattedDenom = denom.toLowerCase();
    if (formattedDenom !== 'fil' && formattedDenom !== 'picofil' && formattedDenom !== 'attofil') throw new Error('Unsupported denomination passed in constructor. Must pass picofil or attofil.');

    if (formattedDenom === 'picofil') {
      _this = _super.call(this, new BigNumber(amount).shiftedBy(-12));

      _defineProperty(_assertThisInitialized(_this), "toFil", function () {
        return _this.toString();
      });

      _defineProperty(_assertThisInitialized(_this), "toPicoFil", function () {
        return _this.shiftedBy(12).toString();
      });

      _defineProperty(_assertThisInitialized(_this), "toAttoFil", function () {
        return _this.shiftedBy(18).toFixed(0, 1);
      });
    } else if (formattedDenom === 'attofil') {
      _this = _super.call(this, new BigNumber(amount).shiftedBy(-18));

      _defineProperty(_assertThisInitialized(_this), "toFil", function () {
        return _this.toString();
      });

      _defineProperty(_assertThisInitialized(_this), "toPicoFil", function () {
        return _this.shiftedBy(12).toString();
      });

      _defineProperty(_assertThisInitialized(_this), "toAttoFil", function () {
        return _this.shiftedBy(18).toFixed(0, 1);
      });
    } else {
      _this = _super.call(this, amount);

      _defineProperty(_assertThisInitialized(_this), "toFil", function () {
        return _this.toString();
      });

      _defineProperty(_assertThisInitialized(_this), "toPicoFil", function () {
        return _this.shiftedBy(12).toString();
      });

      _defineProperty(_assertThisInitialized(_this), "toAttoFil", function () {
        return _this.shiftedBy(18).toFixed(0, 1);
      });
    }

    return _possibleConstructorReturn(_this);
  }

  return FilecoinNumber;
}(BigNumber);

module.exports = FilecoinNumber;
//# sourceMappingURL=FilecoinNumber.js.map