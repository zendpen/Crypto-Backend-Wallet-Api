"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Message = void 0;
var bignumber_js_1 = require("bignumber.js");
var filecoin_address_1 = require("@glif/filecoin-address");
bignumber_js_1.default.set({ ROUNDING_MODE: bignumber_js_1.default.ROUND_HALF_DOWN });
bignumber_js_1.default.config({ EXPONENTIAL_AT: 1e9 });
var Message = /** @class */ (function () {
    function Message(msg) {
        var _this = this;
        this.toLotusType = function () {
            return {
                To: _this.to,
                From: _this.from,
                Nonce: _this.nonce,
                Value: _this.value.toFixed(0, 1),
                GasPremium: _this.gasPremium.toFixed(0, 1),
                GasFeeCap: _this.gasFeeCap.toFixed(0, 1),
                GasLimit: _this.gasLimit,
                Method: _this.method,
                Params: _this.params
            };
        };
        this.toSerializeableType = function () {
            return {
                to: _this.to,
                from: _this.from,
                nonce: _this.nonce,
                value: _this.value.toFixed(0, 1),
                gaspremium: _this.gasPremium.toFixed(0, 1),
                gasfeecap: _this.gasFeeCap.toFixed(0, 1),
                gaslimit: _this.gasLimit,
                method: _this.method,
                params: _this.params
            };
        };
        typeCheck(msg);
        this.to = msg.to;
        this.from = msg.from;
        this.nonce = msg.nonce;
        this.value = new bignumber_js_1.default(msg.value);
        this.gasPremium = new bignumber_js_1.default(msg.gasPremium || '0');
        this.gasFeeCap = new bignumber_js_1.default(msg.gasFeeCap || '0');
        this.gasLimit = msg.gasLimit || 0;
        this.method = msg.method;
        this.params = msg.params;
    }
    return Message;
}());
exports.Message = Message;
var typeCheck = function (msg) {
    if (!msg.to)
        throw new Error('No to address provided');
    if (!msg.from)
        throw new Error('No from address provided');
    if (!filecoin_address_1.validateAddressString(msg.to))
        throw new Error('Invalid to address provided');
    if (!filecoin_address_1.validateAddressString(msg.from))
        throw new Error('Invalid from address provided');
    if (!msg.nonce && msg.nonce !== 0)
        throw new Error('No nonce provided');
    if (typeof msg.nonce !== 'number')
        throw new Error('Nonce is not a number');
    if (!(msg.nonce <= Number.MAX_SAFE_INTEGER))
        throw new Error('Nonce must be smaller than Number.MAX_SAFE_INTEGER');
    if (!msg.value)
        throw new Error('No value provided');
    if (msg.gasLimit && typeof msg.gasLimit !== 'number')
        throw new Error('Gas limit is not a number');
    if (msg.gasLimit && !(msg.gasLimit <= Number.MAX_SAFE_INTEGER))
        throw new Error('Gas limit must be smaller than Number.MAX_SAFE_INTEGER');
    if (!msg.method && msg.method !== 0)
        throw new Error('No method provided');
    if (typeof msg.method !== 'number')
        throw new Error('Method is not a number');
    if (!(msg.method <= Number.MAX_SAFE_INTEGER))
        throw new Error('Method must be smaller than Number.MAX_SAFE_INTEGER');
};
