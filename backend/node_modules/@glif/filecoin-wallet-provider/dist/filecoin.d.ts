/// <reference types="glif__filecoin-rpc-client" />
import LotusRpcEngine, { Config } from '@glif/filecoin-rpc-client';
import { FilecoinNumber } from '@glif/filecoin-number';
import { WalletSubProvider } from './index';
import { LotusMessage, Message } from '@glif/filecoin-message';
export declare class Filecoin {
    wallet: WalletSubProvider;
    jsonRpcEngine: LotusRpcEngine;
    constructor(provider: WalletSubProvider, config?: Config);
    getBalance: (address: string) => Promise<FilecoinNumber>;
    sendMessage: (message: LotusMessage, signature: string) => Promise<{
        '/': string;
    }>;
    getNonce: (address: string) => Promise<number>;
    cloneMsgWOnChainFromAddr: (message: LotusMessage) => Promise<LotusMessage>;
    gasEstimateFeeCap: (message: LotusMessage) => Promise<FilecoinNumber>;
    gasEstimateGasLimit: (message: LotusMessage) => Promise<FilecoinNumber>;
    gasEstimateGasPremium: (message: LotusMessage, numBlocksIncluded?: number) => Promise<FilecoinNumber>;
    gasEstimateMessageGas: (message: LotusMessage, maxFee?: string) => Promise<Message>;
    gasEstimateMaxFee: (message: LotusMessage) => Promise<{
        maxFee: FilecoinNumber;
        message: LotusMessage;
    }>;
    /**
     * formula (some of these variable names might not be the best...):
     * (GasUsed+GasToBurn)*min(BaseFee, FeeCap)+GasLimit*max(0, min(FeeCap-BaseFee, GasPremium)))
     *
     * minBaseFeeFeeCap = min(BaseFee, FeeCap)
     * totalGas = GasUsed+GasToBurn
     * leftSide = totalGas*minBaseFeeFeeCap
     *
     * minTip = min(FeeCap-BaseFee, GasPremium)
     * rightSide = gasLimit*max(0, minTip)
     *
     * paidByMessageSender =
     * leftSide + rightSide
     */
    gasCalcTxFee: (gasFeeCap: string, gasPremium: string, gasLimit: number, baseFee: string, gasUsed: string) => Promise<FilecoinNumber>;
}
