"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Filecoin = void 0;
var filecoin_rpc_client_1 = __importDefault(require("@glif/filecoin-rpc-client"));
var filecoin_number_1 = require("@glif/filecoin-number");
var filecoin_address_1 = require("@glif/filecoin-address");
var utils_1 = require("./utils");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var filecoin_message_1 = require("@glif/filecoin-message");
var Filecoin = /** @class */ (function () {
    function Filecoin(provider, config) {
        var _this = this;
        if (config === void 0) { config = { apiAddress: 'http://127.0.0.1:1234/rpc/v0' }; }
        this.getBalance = function (address) { return __awaiter(_this, void 0, void 0, function () {
            var balance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filecoin_address_1.checkAddressString(address);
                        return [4 /*yield*/, this.jsonRpcEngine.request('WalletBalance', address)];
                    case 1:
                        balance = _a.sent();
                        return [2 /*return*/, new filecoin_number_1.FilecoinNumber(balance, 'attofil')];
                }
            });
        }); };
        this.sendMessage = function (message, signature) { return __awaiter(_this, void 0, void 0, function () {
            var signedMessage;
            return __generator(this, function (_a) {
                if (!message)
                    throw new Error('No message provided.');
                if (!signature)
                    throw new Error('No signature provided.');
                signedMessage = {
                    Message: message,
                    Signature: {
                        // wallet only supports secp256k1 keys for now
                        Type: 1,
                        Data: signature,
                    },
                };
                return [2 /*return*/, this.jsonRpcEngine.request('MpoolPush', signedMessage)];
            });
        }); };
        this.getNonce = function (address) { return __awaiter(_this, void 0, void 0, function () {
            var nonce, _a, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!address)
                            throw new Error('No address provided.');
                        filecoin_address_1.checkAddressString(address);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        _a = Number;
                        return [4 /*yield*/, this.jsonRpcEngine.request('MpoolGetNonce', address)];
                    case 2:
                        nonce = _a.apply(void 0, [_b.sent()]);
                        return [2 /*return*/, nonce];
                    case 3:
                        err_1 = _b.sent();
                        if (err_1 &&
                            err_1.message &&
                            err_1.message.toLowerCase().includes('actor not found'))
                            return [2 /*return*/, 0];
                        throw new Error(err_1);
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        this.cloneMsgWOnChainFromAddr = function (message) { return __awaiter(_this, void 0, void 0, function () {
            var clonedMsg, err_2, networkPrefix;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        clonedMsg = Object.assign({}, message);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        // state call errs if the from address does not exist on chain yet, lookup from actor ID to know this for sure
                        return [4 /*yield*/, this.jsonRpcEngine.request('StateLookupID', clonedMsg.From, null)];
                    case 2:
                        // state call errs if the from address does not exist on chain yet, lookup from actor ID to know this for sure
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        // if from actor doesnt exist, use a hardcoded known actor address
                        if (err_2.message.toLowerCase().includes('actor not found')) {
                            networkPrefix = clonedMsg.From[0];
                            if (!clonedMsg.From)
                                clonedMsg.From = utils_1.KNOWN_TYPE_0_ADDRESS[networkPrefix];
                            if (clonedMsg.From[1] === '0')
                                clonedMsg.From = utils_1.KNOWN_TYPE_0_ADDRESS[networkPrefix];
                            else if (clonedMsg.From[1] === '1')
                                clonedMsg.From = utils_1.KNOWN_TYPE_1_ADDRESS[networkPrefix];
                            else if (clonedMsg.From[1] === '3')
                                clonedMsg.From = utils_1.KNOWN_TYPE_3_ADDRESS[networkPrefix];
                            else {
                                // this should never happen, only t1 and t3 addresses can be used as a from?
                                clonedMsg.From = utils_1.KNOWN_TYPE_0_ADDRESS[networkPrefix];
                            }
                        }
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, clonedMsg];
                }
            });
        }); };
        this.gasEstimateFeeCap = function (message) { return __awaiter(_this, void 0, void 0, function () {
            var clonedMsg, feeCap;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!message)
                            throw new Error('No message provided.');
                        return [4 /*yield*/, this.cloneMsgWOnChainFromAddr(message)];
                    case 1:
                        clonedMsg = _a.sent();
                        return [4 /*yield*/, this.jsonRpcEngine.request('GasEstimateFeeCap', clonedMsg, 0, null)];
                    case 2:
                        feeCap = _a.sent();
                        return [2 /*return*/, new filecoin_number_1.FilecoinNumber(feeCap, 'attofil')];
                }
            });
        }); };
        this.gasEstimateGasLimit = function (message) { return __awaiter(_this, void 0, void 0, function () {
            var clonedMsg, gasLimit;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!message)
                            throw new Error('No message provided.');
                        return [4 /*yield*/, this.cloneMsgWOnChainFromAddr(message)];
                    case 1:
                        clonedMsg = _a.sent();
                        return [4 /*yield*/, this.jsonRpcEngine.request('GasEstimateGasLimit', clonedMsg, null)];
                    case 2:
                        gasLimit = _a.sent();
                        return [2 /*return*/, new filecoin_number_1.FilecoinNumber(gasLimit, 'attofil')];
                }
            });
        }); };
        this.gasEstimateGasPremium = function (message, numBlocksIncluded) {
            if (numBlocksIncluded === void 0) { numBlocksIncluded = 0; }
            return __awaiter(_this, void 0, void 0, function () {
                var clonedMsg, gasPremium;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!message)
                                throw new Error('No message provided.');
                            return [4 /*yield*/, this.cloneMsgWOnChainFromAddr(message)];
                        case 1:
                            clonedMsg = _a.sent();
                            return [4 /*yield*/, this.jsonRpcEngine.request('GasEstimateGasPremium', numBlocksIncluded, clonedMsg.From, clonedMsg.GasLimit || 0, null)];
                        case 2:
                            gasPremium = _a.sent();
                            return [2 /*return*/, new filecoin_number_1.FilecoinNumber(gasPremium, 'attofil')];
                    }
                });
            });
        };
        this.gasEstimateMessageGas = function (message, maxFee) {
            if (maxFee === void 0) { maxFee = '0'; }
            return __awaiter(_this, void 0, void 0, function () {
                var clonedMsg, _a, To, Value, GasPremium, GasFeeCap, GasLimit, Method, Nonce, Params, toAddressWithCorrectPrefix;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!message)
                                throw new Error('No message provided.');
                            return [4 /*yield*/, this.cloneMsgWOnChainFromAddr(message)];
                        case 1:
                            clonedMsg = _b.sent();
                            return [4 /*yield*/, this.jsonRpcEngine.request('GasEstimateMessageGas', clonedMsg, { MaxFee: maxFee }, null)
                                // this is a hack to get by weird UI bugs where f addresses convert to t addresses
                            ];
                        case 2:
                            _a = _b.sent(), To = _a.To, Value = _a.Value, GasPremium = _a.GasPremium, GasFeeCap = _a.GasFeeCap, GasLimit = _a.GasLimit, Method = _a.Method, Nonce = _a.Nonce, Params = _a.Params;
                            toAddressWithCorrectPrefix = clonedMsg.To[0] + To.slice(1);
                            return [2 /*return*/, new filecoin_message_1.Message({
                                    to: toAddressWithCorrectPrefix,
                                    from: message.From,
                                    value: Value,
                                    gasPremium: GasPremium,
                                    gasFeeCap: GasFeeCap,
                                    gasLimit: GasLimit,
                                    method: Method,
                                    nonce: Nonce,
                                    params: Params,
                                })];
                    }
                });
            });
        };
        this.gasEstimateMaxFee = function (message) { return __awaiter(_this, void 0, void 0, function () {
            var msgWithGas, feeCap, limit;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.gasEstimateMessageGas(message)];
                    case 1:
                        msgWithGas = (_a.sent()).toLotusType();
                        feeCap = new bignumber_js_1.default(msgWithGas.GasFeeCap);
                        limit = new bignumber_js_1.default(msgWithGas.GasLimit);
                        return [2 /*return*/, {
                                maxFee: new filecoin_number_1.FilecoinNumber(feeCap.times(limit), 'attofil'),
                                message: msgWithGas,
                            }];
                }
            });
        }); };
        /**
         * formula (some of these variable names might not be the best...):
         * (GasUsed+GasToBurn)*min(BaseFee, FeeCap)+GasLimit*max(0, min(FeeCap-BaseFee, GasPremium)))
         *
         * minBaseFeeFeeCap = min(BaseFee, FeeCap)
         * totalGas = GasUsed+GasToBurn
         * leftSide = totalGas*minBaseFeeFeeCap
         *
         * minTip = min(FeeCap-BaseFee, GasPremium)
         * rightSide = gasLimit*max(0, minTip)
         *
         * paidByMessageSender =
         * leftSide + rightSide
         */
        this.gasCalcTxFee = function (gasFeeCap, gasPremium, gasLimit, baseFee, gasUsed) { return __awaiter(_this, void 0, void 0, function () {
            var gasFeeCapBN, gasPremiumBN, gasLimitBN, baseFeeBN, gasUsedBN, gasToBurn, totalGas, minBaseFeeFeeCap, leftSide, minTip, rightSide;
            return __generator(this, function (_a) {
                gasFeeCapBN = new bignumber_js_1.default(gasFeeCap);
                gasPremiumBN = new bignumber_js_1.default(gasPremium);
                gasLimitBN = new bignumber_js_1.default(gasLimit);
                baseFeeBN = new bignumber_js_1.default(baseFee);
                gasUsedBN = new bignumber_js_1.default(gasUsed);
                gasToBurn = utils_1.computeGasToBurn(gasUsedBN, gasLimitBN);
                totalGas = gasUsedBN.plus(gasToBurn);
                minBaseFeeFeeCap = bignumber_js_1.default.minimum(baseFeeBN, gasFeeCapBN);
                leftSide = totalGas.times(minBaseFeeFeeCap);
                minTip = bignumber_js_1.default.minimum(gasFeeCapBN.minus(baseFeeBN), gasPremiumBN);
                rightSide = gasLimitBN.times(bignumber_js_1.default.maximum(0, minTip));
                return [2 /*return*/, new filecoin_number_1.FilecoinNumber(leftSide.plus(rightSide), 'attofil')];
            });
        }); };
        if (!provider)
            throw new Error('No provider provided.');
        this.wallet = provider;
        this.jsonRpcEngine = new filecoin_rpc_client_1.default(config);
    }
    return Filecoin;
}());
exports.Filecoin = Filecoin;
//# sourceMappingURL=filecoin.js.map