"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testEndpoints = void 0;
const retry_1 = require("../lib/retry");
// import { List } from "immutable";
exports.testEndpoints = async (t, endpoints, expectedError) => {
    let expectedResult = null;
    for (let i = 0; i < endpoints.length; i++) {
        const endpoint = endpoints[i];
        if (!endpoint) {
            continue;
        }
        try {
            const result = await endpoint();
            // console.log("result", result);
            // try {
            //     if (Array.isArray(result)) {
            //         result = List(result).sortBy(x => x.txid).toArray();
            //     }
            // } catch (error) {
            //     // ignore error
            // }
            expectedResult = expectedResult || result;
            t.deepEqual(result, expectedResult, `Comparison failed for endpoint #${i}`);
        }
        catch (error) {
            // tslint:disable-next-line: no-object-mutation
            error.message = retry_1.extractError(error);
            if (expectedError &&
                // Check if error message matches expected error
                ((error.message && error.message.match(expectedError)) ||
                    // Check if request URL matches expected error
                    (error.response &&
                        error.config &&
                        typeof error.response.config.url === "string" &&
                        error.response.config.url.match(expectedError)))) {
                continue;
            }
            console.log("error.response.data", error.response && error.response.data);
            // if (error.message.match(/Request failed with status code 503/)) {
            //     continue;
            // }
            throw error;
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY1V0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NwZWMvc3BlY1V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLHdDQUE0QztBQUU1QyxvQ0FBb0M7QUFFdkIsUUFBQSxhQUFhLEdBQUcsS0FBSyxFQUM5QixDQUE0QixFQUM1QixTQUEwRCxFQUMxRCxhQUFzQixFQUN4QixFQUFFO0lBQ0EsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDO0lBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3ZDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ1gsU0FBUztTQUNaO1FBQ0QsSUFBSTtZQUNBLE1BQU0sTUFBTSxHQUFHLE1BQU0sUUFBUSxFQUFFLENBQUM7WUFDaEMsaUNBQWlDO1lBQ2pDLFFBQVE7WUFDUixtQ0FBbUM7WUFDbkMsK0RBQStEO1lBQy9ELFFBQVE7WUFDUixvQkFBb0I7WUFDcEIsc0JBQXNCO1lBQ3RCLElBQUk7WUFDSixjQUFjLEdBQUcsY0FBYyxJQUFJLE1BQU0sQ0FBQztZQUMxQyxDQUFDLENBQUMsU0FBUyxDQUNQLE1BQU0sRUFDTixjQUFjLEVBQ2QsbUNBQW1DLENBQUMsRUFBRSxDQUN6QyxDQUFDO1NBQ0w7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNaLCtDQUErQztZQUMvQyxLQUFLLENBQUMsT0FBTyxHQUFHLG9CQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDcEMsSUFDSSxhQUFhO2dCQUNiLGdEQUFnRDtnQkFDaEQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7b0JBQ2xELDhDQUE4QztvQkFDOUMsQ0FBQyxLQUFLLENBQUMsUUFBUTt3QkFDWCxLQUFLLENBQUMsTUFBTTt3QkFDWixPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxRQUFRO3dCQUM3QyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFDMUQ7Z0JBQ0UsU0FBUzthQUNaO1lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FDUCxxQkFBcUIsRUFDckIsS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDeEMsQ0FBQztZQUNGLG9FQUFvRTtZQUNwRSxnQkFBZ0I7WUFDaEIsSUFBSTtZQUNKLE1BQU0sS0FBSyxDQUFDO1NBQ2Y7S0FDSjtBQUNMLENBQUMsQ0FBQyJ9