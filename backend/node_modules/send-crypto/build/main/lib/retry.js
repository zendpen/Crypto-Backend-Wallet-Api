"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.retryNTimes = exports.fallback = exports.onlyTestnet = exports.onlyMainnet = exports.extractError = exports.sleep = void 0;
exports.sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
exports.extractError = (error) => {
    if (error && typeof error === "object") {
        if (error.response) {
            return exports.extractError(error.response);
        }
        if (error.error) {
            return exports.extractError(error.error);
        }
        if (error.message) {
            return exports.extractError(error.message);
        }
        if (error.data) {
            return exports.extractError(error.data);
        }
        if (error.context) {
            return exports.extractError(error.context);
        }
        if (error.statusText) {
            return exports.extractError(error.statusText);
        }
        try {
            return JSON.stringify(error);
        }
        catch (error) {
            // Ignore JSON error
        }
    }
    // Remove `Error: ` prefix.
    try {
        if (typeof error === "string") {
            if (error.slice(0, 7).toLowerCase() === "Error: ") {
                // tslint:disable-next-line: no-parameter-reassignment
                error = error.slice(7);
            }
            return error;
        }
        return JSON.stringify(error);
    }
    catch (error) {
        // Ignore JSON error
    }
    return String(error);
};
exports.onlyMainnet = (x, testnet) => testnet ? undefined : x;
exports.onlyTestnet = (x, testnet) => testnet ? x : undefined;
exports.fallback = async (fallbacks) => {
    let firstError;
    for (const fn of fallbacks) {
        if (!fn) {
            continue;
        }
        try {
            return await fn();
        }
        catch (error) {
            firstError = firstError || error;
        }
    }
    throw firstError || new Error("No result returned");
};
exports.retryNTimes = async (fnCall, retries) => {
    let returnError;
    for (let i = 0; i < retries; i++) {
        // if (i > 0) {
        //     console.debug(`Retrying...`);
        // }
        try {
            return await fnCall();
        }
        catch (error) {
            if (String(error).match(/timeout of .* exceeded/)) {
                returnError = error;
            }
            else {
                const errorMessage = exports.extractError(error);
                if (errorMessage) {
                    // tslint:disable-next-line: no-object-mutation
                    error.message += ` (${errorMessage})`;
                }
                throw error;
            }
        }
        await exports.sleep(500);
    }
    throw returnError;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3JldHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFhLFFBQUEsS0FBSyxHQUFHLENBQUMsRUFBVSxFQUFFLEVBQUUsQ0FDaEMsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUV6QyxRQUFBLFlBQVksR0FBRyxDQUFDLEtBQVUsRUFBVSxFQUFFO0lBQy9DLElBQUksS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUNwQyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDaEIsT0FBTyxvQkFBWSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN2QztRQUNELElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtZQUNiLE9BQU8sb0JBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDcEM7UUFDRCxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7WUFDZixPQUFPLG9CQUFZLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3RDO1FBQ0QsSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFO1lBQ1osT0FBTyxvQkFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuQztRQUNELElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUNmLE9BQU8sb0JBQVksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdEM7UUFDRCxJQUFJLEtBQUssQ0FBQyxVQUFVLEVBQUU7WUFDbEIsT0FBTyxvQkFBWSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN6QztRQUNELElBQUk7WUFDQSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDaEM7UUFBQyxPQUFPLEtBQUssRUFB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