"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUTXOs = exports.fixUTXOs = exports.fixUTXO = exports.fixValue = exports.sortUTXOs = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
/**
 * sortUTXOs compares two UTXOs by amount, then confirmations and then hash.
 *
 * @example
 * sortUTXOs({amount: 1, confirmations: 1}, {amount: 2, confirmations: 0});
 * // -1, representing that the first parameter should be ordered first.
 *
 * @returns a negative value to represent that a should come before b or a
 * positive value to represent that b should come before a.
 */
exports.sortUTXOs = (a, b) => {
    // Sort greater values first
    if (a.amount !== b.amount) {
        return b.amount - a.amount;
    }
    // Sort older UTXOs first
    if (a.confirmations !== b.confirmations) {
        return a.confirmations - b.confirmations;
    }
    return a.txHash <= b.txHash ? -1 : 1;
};
/**
 * fixValue turns a readable value, e.g. `0.0001` BTC, to the value in the smallest
 * unit, e.g. `10000` sats.
 *
 * @example
 * fixValue(0.0001, 8) = 10000;
 *
 * @param value Value in the readable representation, e.g. `0.0001` BTC.
 * @param decimals The number of decimals to shift by, e.g. 8.
 */
exports.fixValue = (value, decimals) => new bignumber_js_1.default(value)
    .multipliedBy(new bignumber_js_1.default(10).exponentiatedBy(decimals))
    .decimalPlaces(0)
    .toNumber();
/**
 * fixUTXO calls {{fixValue}} on the value of the UTXO.
 */
exports.fixUTXO = (utxo, decimals) => (Object.assign(Object.assign({}, utxo), { amount: exports.fixValue(utxo.amount, decimals) }));
/**
 * fixUTXOs maps over an array of UTXOs and calls {{fixValue}}.
 */
exports.fixUTXOs = (utxos, decimals) => {
    return utxos.map((utxo) => exports.fixUTXO(utxo, decimals));
};
/**
 * Retrieves UTXOs for a BTC, ZEC or BCH address.
 *
 * @param network The Ren Network object
 * @param currencyName "BTC", "ZEC" or "BCH"
 *
 * @param address The BTC, ZEC or BCH address to retrieve the UTXOS for
 * @param confirmations Restrict UTXOs to having at least this many
 *        confirmations. If confirmations is 0, unconfirmed UTXOs are included.
 * @param endpoint An offset to allow trying different endpoints first, in case
 * o      one is out of sync.
 */
exports.getUTXOs = (testnet, currencyName, endpoints) => async (address, confirmations, endpoint = 0) => {
    let firstError;
    for (let i = 0; i < endpoints.length; i++) {
        try {
            const utxos = await endpoints[(i + endpoint) % endpoints.length]();
            return utxos.filter((utxo) => utxo.confirmations >= confirmations);
        }
        catch (error) {
            firstError = firstError || error;
        }
    }
    throw (firstError ||
        new Error(`No endpoints found for retrieving ${currencyName} UTXOs.`));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXR4by5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdXR4by50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnRUFBcUM7QUFVckM7Ozs7Ozs7OztHQVNHO0FBQ1UsUUFBQSxTQUFTLEdBQUcsQ0FBQyxDQUFPLEVBQUUsQ0FBTyxFQUFVLEVBQUU7SUFDbEQsNEJBQTRCO0lBQzVCLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFO1FBQ3ZCLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0tBQzlCO0lBQ0QseUJBQXlCO0lBQ3pCLElBQUksQ0FBQyxDQUFDLGFBQWEsS0FBSyxDQUFDLENBQUMsYUFBYSxFQUFFO1FBQ3JDLE9BQU8sQ0FBQyxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO0tBQzVDO0lBQ0QsT0FBTyxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekMsQ0FBQyxDQUFDO0FBRUY7Ozs7Ozs7OztHQVNHO0FBQ1UsUUFBQSxRQUFRLEdBQUcsQ0FBQyxLQUFhLEVBQUUsUUFBZ0IsRUFBRSxFQUFFLENBQ3hELElBQUksc0JBQVMsQ0FBQyxLQUFLLENBQUM7S0FDZixZQUFZLENBQUMsSUFBSSxzQkFBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN6RCxhQUFhLENBQUMsQ0FBQyxDQUFDO0tBQ2hCLFFBQVEsRUFBRSxDQUFDO0FBRXBCOztHQUVHO0FBQ1UsUUFBQSxPQUFPLEdBQUcsQ0FBQyxJQUFVLEVBQUUsUUFBZ0IsRUFBUSxFQUFFLENBQUMsaUNBQ3hELElBQUksS0FDUCxNQUFNLEVBQUUsZ0JBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxJQUN6QyxDQUFDO0FBRUg7O0dBRUc7QUFDVSxRQUFBLFFBQVEsR0FBRyxDQUFDLEtBQXNCLEVBQUUsUUFBZ0IsRUFBRSxFQUFFO0lBQ2pFLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsZUFBTyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ3hELENBQUMsQ0FBQztBQUVGOzs7Ozs7Ozs7OztHQVdHO0FBQ1UsUUFBQSxRQUFRLEdBQUcsQ0FDcEIsT0FBZ0IsRUFDaEIsWUFBb0IsRUFDcEIsU0FBZ0QsRUFDbEQsRUFBRSxDQUFDLEtBQUssRUFDTixPQUFlLEVBQ2YsYUFBcUIsRUFDckIsUUFBUSxHQUFHLENBQUMsRUFDWSxFQUFFO0lBQzFCLElBQUksVUFBVSxDQUFDO0lBRWYsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDdkMsSUFBSTtZQUNBLE1BQU0sS0FBSyxHQUFHLE1BQU0sU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ25FLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxhQUFhLENBQUMsQ0FBQztTQUN0RTtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ1osVUFBVSxHQUFHLFVBQVUsSUFBSSxLQUFLLENBQUM7U0FDcEM7S0FDSjtJQUVELE1BQU0sQ0FDRixVQUFVO1FBQ1YsSUFBSSxLQUFLLENBQUMscUNBQXFDLFlBQVksU0FBUyxDQUFDLENBQ3hFLENBQUM7QUFDTixDQUFDLENBQUMifQ==