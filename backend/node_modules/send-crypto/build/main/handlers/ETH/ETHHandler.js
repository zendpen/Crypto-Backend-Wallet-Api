"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ETHHandler = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const promiEvent_1 = require("../../lib/promiEvent");
const ethUtils_1 = require("./ethUtils");
class ETHHandler {
    constructor(privateKey, network, options, sharedState) {
        this.decimals = 18;
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => typeof asset === "string" &&
            ["ETH", "ETHER", "ETHEREUM"].indexOf(asset.toUpperCase()) !== -1;
        this.address = async (asset, options) => this.unlockedAddress;
        // (await this.sharedState.web3.eth.getAccounts())[0];
        // Balance
        this.getBalance = async (asset, options) => (await this.getBalanceInSats(asset, options)).dividedBy(new bignumber_js_1.default(10).exponentiatedBy(this.decimals));
        this.getBalanceInSats = async (asset, options) => {
            let atBlock;
            if (options && options.confirmations && options.confirmations > 0) {
                const currentBlock = new bignumber_js_1.default(await this.sharedState.web3.eth.getBlockNumber());
                atBlock = currentBlock
                    .minus(options.confirmations)
                    .plus(1)
                    .toNumber();
            }
            const address = (options && options.address) || (await this.address(asset));
            return new bignumber_js_1.default(await this.sharedState.web3.eth.getBalance(address, atBlock));
        };
        // Transfer
        this.send = (to, value, asset, options) => this.sendSats(to, value.times(new bignumber_js_1.default(10).exponentiatedBy(this.decimals)), asset, options);
        this.sendSats = (to, valueIn, asset, optionsIn) => {
            const promiEvent = promiEvent_1.newPromiEvent();
            (async () => {
                const options = optionsIn || {};
                let value = valueIn;
                const txOptions = ethUtils_1.getTransactionConfig(options);
                if (options.subtractFee) {
                    const gasPrice = txOptions.gasPrice ||
                        (await this.sharedState.web3.eth.getGasPrice());
                    const gasLimit = txOptions.gas || 21000;
                    const fee = new bignumber_js_1.default(gasPrice.toString()).times(gasLimit);
                    if (fee.gt(value)) {
                        throw new Error(`Unable to include fee in value, fee exceeds value (${fee.toFixed()} > ${value.toFixed()})`);
                    }
                    value = value.minus(fee);
                }
                const web3PromiEvent = this.sharedState.web3.eth.sendTransaction(Object.assign(Object.assign({ from: await this.address(asset), gas: 21000 }, txOptions), { to, value: value.toFixed() }));
                promiEvent_1.forwardEvents(web3PromiEvent, promiEvent);
                web3PromiEvent.then(promiEvent.resolve);
            })().catch((error) => {
                promiEvent.reject(error);
            });
            return promiEvent;
        };
        this.network = ethUtils_1.getNetwork(network);
        this.privateKey = privateKey;
        const [web3, address] = ethUtils_1.getWeb3(this.privateKey, ethUtils_1.getEndpoint(this.network, options && options.ethereumNode, options && options.infuraKey));
        this.unlockedAddress = address;
        sharedState.web3 = web3;
        this.sharedState = sharedState;
    }
}
exports.ETHHandler = ETHHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRVRISGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9oYW5kbGVycy9FVEgvRVRISGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnRUFBcUM7QUFJckMscURBQWdGO0FBRWhGLHlDQUtvQjtBQWtCcEIsTUFBYSxVQUFVO0lBY25CLFlBQ0ksVUFBa0IsRUFDbEIsT0FBZSxFQUNmLE9BQTRCLEVBQzVCLFdBQWlCO1FBWkosYUFBUSxHQUFHLEVBQUUsQ0FBQztRQTZCL0IsbURBQW1EO1FBQ25DLGlCQUFZLEdBQUcsQ0FBQyxLQUFZLEVBQVcsRUFBRSxDQUNyRCxPQUFPLEtBQUssS0FBSyxRQUFRO1lBQ3pCLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFckQsWUFBTyxHQUFHLEtBQUssRUFDM0IsS0FBWSxFQUNaLE9BQXdCLEVBQ1QsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDM0Msc0RBQXNEO1FBRXRELFVBQVU7UUFDTSxlQUFVLEdBQUcsS0FBSyxFQUM5QixLQUFZLEVBQ1osT0FBd0IsRUFDTixFQUFFLENBQ3BCLENBQUMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUNuRCxJQUFJLHNCQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDbkQsQ0FBQztRQUVVLHFCQUFnQixHQUFHLEtBQUssRUFDcEMsS0FBWSxFQUNaLE9BQXdCLEVBQ04sRUFBRTtZQUNwQixJQUFJLE9BQU8sQ0FBQztZQUNaLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxhQUFhLElBQUksT0FBTyxDQUFDLGFBQWEsR0FBRyxDQUFDLEVBQUU7Z0JB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