"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BTCHandler = exports._apiFallbacks = void 0;
const bitcoin = __importStar(require("bitgo-utxo-lib"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const immutable_1 = require("immutable");
const blockchair_1 = require("../../common/apis/blockchair");
const blockstream_1 = require("../../common/apis/blockstream");
const sochain_1 = require("../../common/apis/sochain");
const bitgoUtxoLib_1 = require("../../common/libraries/bitgoUtxoLib");
const confirmations_1 = require("../../lib/confirmations");
const promiEvent_1 = require("../../lib/promiEvent");
const retry_1 = require("../../lib/retry");
const utils_1 = require("../../lib/utils");
exports._apiFallbacks = {
    fetchUTXO: (testnet, txHash, vOut) => [
        ...utils_1.shuffleArray(() => blockstream_1.Blockstream.fetchUTXO(testnet)(txHash, vOut), () => blockchair_1.Blockchair.fetchUTXO(testnet
            ? blockchair_1.Blockchair.networks.BITCOIN_TESTNET
            : blockchair_1.Blockchair.networks.BITCOIN)(txHash, vOut)),
    ],
    fetchUTXOs: (testnet, address, confirmations) => [
        ...utils_1.shuffleArray(() => blockstream_1.Blockstream.fetchUTXOs(testnet)(address, confirmations), () => blockchair_1.Blockchair.fetchUTXOs(testnet
            ? blockchair_1.Blockchair.networks.BITCOIN_TESTNET
            : blockchair_1.Blockchair.networks.BITCOIN)(address, confirmations)),
        () => sochain_1.Sochain.fetchUTXOs(testnet ? "BTCTEST" : "BTC")(address, confirmations),
    ],
    fetchTXs: (testnet, address, confirmations = 0) => [
        ...utils_1.shuffleArray(() => blockstream_1.Blockstream.fetchTXs(testnet)(address), () => blockchair_1.Blockchair.fetchTXs(testnet
            ? blockchair_1.Blockchair.networks.BITCOIN_TESTNET
            : blockchair_1.Blockchair.networks.BITCOIN)(address, confirmations), () => sochain_1.Sochain.fetchTXs(testnet ? "BTCTEST" : "BTC")(address, confirmations)),
    ],
    broadcastTransaction: (testnet, hex) => [
        ...utils_1.shuffleArray(() => blockstream_1.Blockstream.broadcastTransaction(testnet)(hex), () => blockchair_1.Blockchair.broadcastTransaction(testnet
            ? blockchair_1.Blockchair.networks.BITCOIN_TESTNET
            : blockchair_1.Blockchair.networks.BITCOIN)(hex)),
        () => sochain_1.Sochain.broadcastTransaction(testnet ? "BTCTEST" : "BTC")(hex),
    ],
};
class BTCHandler {
    constructor(privateKey, network) {
        this.decimals = 8;
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => typeof asset === "string" &&
            ["BTC", "BITCOIN"].indexOf(asset.toUpperCase()) !== -1;
        this.address = async (asset, options) => this.privateKey.getAddress();
        // Balance
        this.getBalance = async (asset, options) => (await this.getBalanceInSats(asset, options)).dividedBy(new bignumber_js_1.default(10).exponentiatedBy(this.decimals));
        this.getBalanceInSats = async (asset, options) => {
            const utxos = await BTCHandler.getUTXOs(this.testnet, Object.assign(Object.assign({}, options), { address: (options && options.address) || (await this.address(asset)) }));
            return utxos.reduce((sum, utxo) => sum.plus(utxo.amount), new bignumber_js_1.default(0));
        };
        // Transfer
        this.send = (to, value, asset, options) => this.sendSats(to, value.times(new bignumber_js_1.default(10).exponentiatedBy(this.decimals)), asset, options);
        this.sendSats = (to, valueIn, asset, options) => {
            const promiEvent = promiEvent_1.newPromiEvent();
            let txHash;
            let errored;
            (async () => {
                const fromAddress = await this.address(asset);
                const changeAddress = fromAddress;
                const utxos = immutable_1.List(await BTCHandler.getUTXOs(this.testnet, Object.assign(Object.assign({}, options), { address: fromAddress })))
                    .sortBy((utxo) => utxo.amount)
                    .reverse()
                    .toArray();
                const built = await bitgoUtxoLib_1.BitgoUTXOLib.buildUTXO(this.testnet
                    ? bitcoin.networks.testnet
                    : bitcoin.networks.bitcoin, this.privateKey, changeAddress, to, valueIn, utxos, options);
                txHash = await retry_1.retryNTimes(() => retry_1.fallback(exports._apiFallbacks.broadcastTransaction(this.testnet, built.toHex())), 3);
                promiEvent.emit("transactionHash", txHash);
                promiEvent.resolve(txHash);
            })().catch((error) => {
                errored = true;
                promiEvent.reject(error);
            });
            confirmations_1.subscribeToConfirmations(promiEvent, () => errored, async () => (txHash ? this._getConfirmations(txHash) : 0));
            return promiEvent;
        };
        this._getConfirmations = (txHash) => retry_1.retryNTimes(async () => (await retry_1.fallback(
        // Fetch confirmations for first output of transaction.
        exports._apiFallbacks.fetchUTXO(this.testnet, txHash, 0))).confirmations, 2);
        this.testnet = network !== "mainnet";
        this.privateKey = bitgoUtxoLib_1.BitgoUTXOLib.loadPrivateKey(this.testnet ? bitcoin.networks.testnet : bitcoin.networks.bitcoin, privateKey);
    }
}
exports.BTCHandler = BTCHandler;
BTCHandler.getUTXOs = async (testnet, options) => {
    const confirmations = options && options.confirmations !== undefined
        ? options.confirmations
        : 0;
    const endpoints = exports._apiFallbacks.fetchUTXOs(testnet, options.address, confirmations);
    return retry_1.retryNTimes(() => retry_1.fallback(endpoints), 2);
};
BTCHandler.getUTXO = async (testnet, txHash, vOut) => {
    const endpoints = exports._apiFallbacks.fetchUTXO(testnet, txHash, vOut);
    return retry_1.retryNTimes(() => retry_1.fallback(endpoints), 2);
};
BTCHandler.getTransactions = async (testnet, options) => {
    const confirmations = options && options.confirmations !== undefined
        ? options.confirmations
        : 0;
    const endpoints = exports._apiFallbacks.fetchTXs(testnet, options.address, confirmations);
    return retry_1.retryNTimes(() => retry_1.fallback(endpoints), 2);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQlRDSGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9oYW5kbGVycy9CVEMvQlRDSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsd0RBQTBDO0FBRTFDLGdFQUFxQztBQUNyQyx5Q0FBaUM7QUFFakMsNkRBQTBEO0FBQzFELCtEQUE0RDtBQUM1RCx1REFBb0Q7QUFDcEQsc0VBQW1FO0FBQ25FLDJEQUFtRTtBQUNuRSxxREFBaUU7QUFDakUsMkNBQXdEO0FBQ3hELDJDQUErQztBQWNsQyxRQUFBLGFBQWEsR0FBRztJQUN6QixTQUFTLEVBQUUsQ0FBQyxPQUFnQixFQUFFLE1BQWMsRUFBRSxJQUFZLEVBQUUsRUFBRSxDQUFDO1FBQzNELEdBQUcsb0JBQVksQ0FDWCxHQUFHLEVBQUUsQ0FBQyx5QkFBVyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQ2xELEdBQUcsRUFBRSxDQUNELHVCQUFVLENBQUMsU0FBUyxDQUNoQixPQUFPO1lBQ0gsQ0FBQyxDQUFDLHVCQUFVLENBQUMsUUFBUSxDQUFDLGVBQWU7WUFDckMsQ0FBQyxDQUFDLHVCQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FDcEMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQ3RCO0tBQ0o7SUFFRCxVQUFVLEVBQUUsQ0FBQyxPQUFnQixFQUFFLE9BQWUsRUFBRSxhQUFxQixFQUFFLEVBQUUsQ0FBQztRQUN0RSxHQUFHLG9CQUFZLENBQ1gsR0FBRyxFQUFFLENBQUMseUJBQVcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxFQUM3RCxHQUFHLEVBQUUsQ0FDRCx1QkFBVSxDQUFDLFVBQVUsQ0FDakIsT0FBTztZQUNILENBQUMsQ0FBQyx1QkFBVSxDQUFDLFFBQVEsQ0FBQyxlQUFlO1lBQ3JDLENB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