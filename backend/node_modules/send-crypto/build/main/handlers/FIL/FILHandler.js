"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FILHandler = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const filecoin_message_1 = require("@glif/filecoin-message");
const filecoin_wallet_provider_1 = __importStar(require("@glif/filecoin-wallet-provider"));
const promiEvent_1 = require("../../lib/promiEvent");
const retry_1 = require("../../lib/retry");
const provider_1 = require("./provider");
class FILHandler {
    constructor(privateKey, network, options = {}, sharedState) {
        this.decimals = 18;
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => typeof asset === "string" &&
            ["FIL", "FILECOIN"].indexOf(asset.toUpperCase()) !== -1;
        this.address = async (asset, _options = {}) => {
            if (!this.handlesAsset(asset)) {
                throw new Error(`Asset ${asset} not supported.`);
            }
            const accounts = await this.sharedState.filecoin.wallet.getAccounts(0, 1, this.network);
            return accounts[0];
        };
        // Balance
        this.getBalance = async (asset, options = {}) => new bignumber_js_1.default(await this.sharedState.filecoin.getBalance((options && options.address) || (await this.address(asset))));
        this.getBalanceInSats = async (asset, options = {}) => (await this.getBalance(asset, options)).multipliedBy(new bignumber_js_1.default(10).exponentiatedBy(this.decimals));
        // Transfer
        this.send = (to, value, asset, options = {}) => this.sendSats(to, value.times(new bignumber_js_1.default(10).exponentiatedBy(this.decimals)), asset, options);
        this.sendSats = (to, valueIn, asset, options = {}) => {
            const promiEvent = promiEvent_1.newPromiEvent();
            (async () => {
                const address = await this.address(asset);
                const nonce = await this.sharedState.filecoin.getNonce(address);
                let value = valueIn;
                let message = new filecoin_message_1.Message(Object.assign({ to, from: address, value: valueIn, method: 0, gasFeeCap: 0, gasLimit: 0, gasPremium: 0, nonce, params: undefined }, options));
                message = await this.sharedState.filecoin.gasEstimateMessageGas(message.toLotusType());
                if (options.subtractFee) {
                    const { maxFee: fee, } = await this.sharedState.filecoin.gasEstimateMaxFee(message.toLotusType());
                    if (fee.gt(value)) {
                        throw new Error(`Unable to include fee in value, fee exceeds value (${fee.toFixed()} > ${value.toFixed()})`);
                    }
                    value = value.minus(fee);
                }
                const signed = await this.sharedState.filecoin.wallet.sign(address, message.toLotusType());
                const tx = await this.sharedState.filecoin.sendMessage(signed.Message, signed.Signature.Data);
                const txHash = tx["/"];
                promiEvent.emit("transactionHash", txHash);
                while (true) {
                    const result = await this.sharedState.filecoin.jsonRpcEngine.request("StateSearchMsg", tx);
                    /*
                    {
                        Message: {
                            '/': 'bafy2bzacedtcalpfb5dj3de6jb5lfncqtxw4kia4xotpg3on3p7gcesiwlube'
                        },
                        Receipt: { ExitCode: 0, Return: null, GasUsed: 433268 },
                        ReturnDec: null,
                        TipSet: [
                            {
                            '/': 'bafy2bzacedsqymqnjl2oir7q2rgbwyqscihvebkvr7hfzdq5b2tvcct3cwczy'
                            },
                            {
                            '/': 'bafy2bzacednrjqbsyooob3f76wwct4iupauehvq6wnzrbf6uc4dskptwu4er6'
                            },
                            {
                            '/': 'bafy2bzaceany2in5cadbyf27mecnmzc6ustqfewd5dobxquidzbn3wtnjd52y'
                            }
                        ],
                        Height: 53025
                    }
                    */
                    if (result) {
                        promiEvent.emit("confirmation", 1);
                        break;
                    }
                    await retry_1.sleep(10 * 1000);
                }
                promiEvent.resolve(txHash);
            })().catch((error) => {
                promiEvent.reject(error);
            });
            return promiEvent;
        };
        const filecoin = new filecoin_wallet_provider_1.default(provider_1.SingleKeyProvider(privateKey), {
            apiAddress: options && options.apiAddress,
            token: options && options.token,
        });
        this.network =
            network === "mainnet" ? filecoin_wallet_provider_1.Network.MAIN : filecoin_wallet_provider_1.Network.TEST;
        sharedState.filecoin = filecoin;
        this.sharedState = sharedState;
    }
}
exports.FILHandler = FILHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRklMSGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9oYW5kbGVycy9GSUwvRklMSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZ0VBQXFDO0FBQ3JDLDZEQUE2RDtBQUM3RCwyRkFBaUY7QUFFakYscURBQWlFO0FBQ2pFLDJDQUF3QztBQUV4Qyx5Q0FBK0M7QUFjL0MsTUFBYSxVQUFVO0lBV25CLFlBQ0ksVUFBa0IsRUFDbEIsT0FBZSxFQUNmLFVBQThCLEVBQUUsRUFDaEMsV0FBaUI7UUFWSixhQUFRLEdBQUcsRUFBRSxDQUFDO1FBd0IvQixtREFBbUQ7UUFDbkMsaUJBQVksR0FBRyxDQUFDLEtBQVksRUFBVyxFQUFFLENBQ3JELE9BQU8sS0FBSyxLQUFLLFFBQVE7WUFDekIsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRTVDLFlBQU8sR0FBRyxLQUFLLEVBQzNCLEtBQVksRUFDWixXQUEyQixFQUFFLEVBQ2QsRUFBRTtZQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDM0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxTQUFTLEtBQUssaUJBQWlCLENBQUMsQ0FBQzthQUNwRDtZQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FDL0QsQ0FBQyxFQUNELENBQUMsRUFDRCxJQUFJLENBQUMsT0FBTyxDQUNmLENBQUM7WUFDRixPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixDQUFDLENBQUM7UUFFRixVQUFVO1FBQ00sZUFBVSxHQUFHLEtBQUssRUFDOUIsS0FBWSxFQUNaLFVBQTBCLEVBQUUsRUFD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