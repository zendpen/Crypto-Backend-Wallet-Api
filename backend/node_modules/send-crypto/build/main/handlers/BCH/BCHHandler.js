"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BCHHandler = exports._apiFallbacks = void 0;
const bitcoin = __importStar(require("bitgo-utxo-lib"));
const bchaddrjs_1 = require("bchaddrjs");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const immutable_1 = require("immutable");
const bitcoinDotCom_1 = require("../../common/apis/bitcoinDotCom");
const blockchair_1 = require("../../common/apis/blockchair");
const bitgoUtxoLib_1 = require("../../common/libraries/bitgoUtxoLib");
const confirmations_1 = require("../../lib/confirmations");
const promiEvent_1 = require("../../lib/promiEvent");
const retry_1 = require("../../lib/retry");
const toCashAddr = (legacyAddress) => {
    try {
        return bchaddrjs_1.toCashAddress(legacyAddress);
    }
    catch (error) {
        return legacyAddress;
    }
};
exports._apiFallbacks = {
    fetchUTXO: (testnet, txHash, vOut) => [
        () => bitcoinDotCom_1.BitcoinDotCom.fetchUTXO(testnet)(txHash, vOut),
        testnet
            ? undefined
            : () => blockchair_1.Blockchair.fetchUTXO(blockchair_1.Blockchair.networks.BITCOIN_CASH)(txHash, vOut),
    ],
    fetchUTXOs: (testnet, address, confirmations) => [
        () => bitcoinDotCom_1.BitcoinDotCom.fetchUTXOs(testnet)(address, confirmations),
        testnet
            ? undefined
            : () => blockchair_1.Blockchair.fetchUTXOs(blockchair_1.Blockchair.networks.BITCOIN_CASH)(address, confirmations),
    ],
    fetchTXs: (testnet, address, confirmations = 0) => [
        () => bitcoinDotCom_1.BitcoinDotCom.fetchTXs(testnet)(address, confirmations),
        testnet
            ? undefined
            : () => blockchair_1.Blockchair.fetchTXs(blockchair_1.Blockchair.networks.BITCOIN_CASH)(address, confirmations),
    ],
    broadcastTransaction: (testnet, hex) => [
        () => bitcoinDotCom_1.BitcoinDotCom.broadcastTransaction(testnet)(hex),
        testnet
            ? undefined
            : () => blockchair_1.Blockchair.broadcastTransaction(blockchair_1.Blockchair.networks.BITCOIN_CASH)(hex),
    ],
};
class BCHHandler {
    constructor(privateKey, network) {
        this.decimals = 8;
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => typeof asset === "string" &&
            ["BCH", "BITCOIN CASH", "BCASH", "BITCOINCASH", "BITCOIN-CASH"].indexOf(asset.toUpperCase()) !== -1;
        this.address = async (asset, options) => toCashAddr(this.privateKey.getAddress());
        // Balance
        this.getBalance = async (asset, options) => (await this.getBalanceInSats(asset, options)).dividedBy(new bignumber_js_1.default(10).exponentiatedBy(this.decimals));
        this.getBalanceInSats = async (asset, options) => {
            const utxos = await BCHHandler.getUTXOs(this.testnet, Object.assign(Object.assign({}, options), { address: (options && options.address) || (await this.address(asset)) }));
            return utxos.reduce((sum, utxo) => sum.plus(utxo.amount), new bignumber_js_1.default(0));
        };
        // Transfer
        this.send = (to, value, asset, options) => this.sendSats(to, value.times(new bignumber_js_1.default(10).exponentiatedBy(this.decimals)), asset, options);
        this.sendSats = (to, valueIn, asset, options) => {
            const promiEvent = promiEvent_1.newPromiEvent();
            let txHash;
            let errored;
            (async () => {
                const fromAddress = bchaddrjs_1.toLegacyAddress(await this.address(asset));
                const toAddress = bchaddrjs_1.toLegacyAddress(to);
                const changeAddress = fromAddress;
                const utxos = immutable_1.List(await BCHHandler.getUTXOs(this.testnet, Object.assign(Object.assign({}, options), { address: fromAddress })))
                    .sortBy((utxo) => utxo.amount)
                    .reverse()
                    .toArray();
                const built = await bitgoUtxoLib_1.BitgoUTXOLib.buildUTXO(this._bitgoNetwork(), this.privateKey, changeAddress, toAddress, valueIn, utxos, Object.assign(Object.assign({}, options), { signFlag: 
                    // tslint:disable-next-line: no-bitwise
                    bitcoin.Transaction.SIGHASH_SINGLE |
                        bitcoin.Transaction.SIGHASH_BITCOINCASHBIP143 }));
                txHash = await retry_1.retryNTimes(() => retry_1.fallback(exports._apiFallbacks.broadcastTransaction(this.testnet, built.toHex())), 3);
                promiEvent.emit("transactionHash", txHash);
                promiEvent.resolve(txHash);
            })().catch((error) => {
                errored = true;
                promiEvent.reject(error);
            });
            confirmations_1.subscribeToConfirmations(promiEvent, () => errored, async () => (txHash ? this._getConfirmations(txHash) : 0));
            return promiEvent;
        };
        this._getConfirmations = (txHash) => retry_1.retryNTimes(async () => (await retry_1.fallback(
        // Fetch confirmations for first output of transaction.
        exports._apiFallbacks.fetchUTXO(this.testnet, txHash, 0))).confirmations, 2);
        this._bitgoNetwork = () => this.testnet
            ? bitcoin.networks.bitcoincashTestnet
            : bitcoin.networks.bitcoincash;
        this.testnet = network !== "mainnet";
        this.privateKey = bitgoUtxoLib_1.BitgoUTXOLib.loadPrivateKey(this._bitgoNetwork(), privateKey);
    }
}
exports.BCHHandler = BCHHandler;
BCHHandler.getUTXOs = async (testnet, options) => {
    const address = toCashAddr(options.address);
    const confirmations = options.confirmations || 0;
    const endpoints = exports._apiFallbacks.fetchUTXOs(testnet, address, confirmations);
    const utxos = await retry_1.retryNTimes(() => retry_1.fallback(endpoints), 2);
    return utxos;
};
BCHHandler.getUTXO = async (testnet, txHash, vOut) => {
    const endpoints = exports._apiFallbacks.fetchUTXO(testnet, txHash, vOut);
    return retry_1.retryNTimes(() => retry_1.fallback(endpoints), 2);
};
BCHHandler.getTransactions = async (testnet, options) => {
    const address = toCashAddr(options.address);
    const confirmations = options && options.confirmations !== undefined
        ? options.confirmations
        : 0;
    const endpoints = exports._apiFallbacks.fetchTXs(testnet, address, confirmations);
    return retry_1.retryNTimes(() => retry_1.fallback(endpoints), 2);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQkNISGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9oYW5kbGVycy9CQ0gvQkNISGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsd0RBQTBDO0FBRTFDLHlDQUEyRDtBQUMzRCxnRUFBcUM7QUFDckMseUNBQWlDO0FBRWpDLG1FQUFnRTtBQUNoRSw2REFBMEQ7QUFDMUQsc0VBQW1FO0FBQ25FLDJEQUFtRTtBQUNuRSxxREFBaUU7QUFDakUsMkNBQXdEO0FBY3hELE1BQU0sVUFBVSxHQUFHLENBQUMsYUFBcUIsRUFBRSxFQUFFO0lBQ3pDLElBQUk7UUFDQSxPQUFPLHlCQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDdkM7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNaLE9BQU8sYUFBYSxDQUFDO0tBQ3hCO0FBQ0wsQ0FBQyxDQUFDO0FBRVcsUUFBQSxhQUFhLEdBQUc7SUFDekIsU0FBUyxFQUFFLENBQUMsT0FBZ0IsRUFBRSxNQUFjLEVBQUUsSUFBWSxFQUFFLEVBQUUsQ0FBQztRQUMzRCxHQUFHLEVBQUUsQ0FBQyw2QkFBYSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDO1FBQ3BELE9BQU87WUFDSCxDQUFDLENBQUMsU0FBUztZQUNYLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FDRCx1QkFBVSxDQUFDLFNBQVMsQ0FBQyx1QkFBVSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FDbEQsTUFBTSxFQUNOLElBQUksQ0FDUDtLQUNkO0lBRUQsVUFBVSxFQUFFLENBQUMsT0FBZ0IsRUFBRSxPQUFlLEVBQUUsYUFBcUIsRUFBRSxFQUFFLENBQUM7UUFDdEUsR0FBRyxFQUFFLENBQUMsNkJBQWEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQztRQUMvRCxPQUFPO1lBQ0gs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