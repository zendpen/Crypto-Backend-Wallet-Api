"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitcoinDotCom = exports.broadcastTransaction = void 0;
const axios_1 = __importDefault(require("axios"));
const utxo_1 = require("../../lib/utxo");
const timeout_1 = require("./timeout");
const endpoint = (testnet) => testnet ? "https://trest.bitcoin.com/v2/" : "https://rest.bitcoin.com/v2/";
const fetchUTXO = (testnet) => async (txHash, vOut) => {
    const url = `${endpoint(testnet).replace(/\/$/, "")}/transaction/details/${txHash}`;
    const response = await axios_1.default.get(`${url}`, {
        timeout: timeout_1.DEFAULT_TIMEOUT,
    });
    const utxo = response.data;
    return utxo_1.fixUTXO({
        txHash,
        amount: parseFloat(utxo.vout[vOut].value),
        // script_hex: utxo.scriptPubKey,
        vOut,
        confirmations: utxo.confirmations,
    }, 8);
};
const fetchUTXOs = (testnet) => async (address, confirmations) => {
    const url = `${endpoint(testnet).replace(/\/$/, "")}/address/utxo/${address}`;
    const response = await axios_1.default.get(url, {
        timeout: timeout_1.DEFAULT_TIMEOUT,
    });
    return utxo_1.fixUTXOs(response.data.utxos
        .map((utxo) => ({
        txHash: utxo.txid,
        amount: utxo.amount,
        // script_hex: utxo.scriptPubKey,
        vOut: utxo.vout,
        confirmations: utxo.confirmations,
    }))
        .filter((utxo) => confirmations === 0 || utxo.confirmations >= confirmations), 8).sort(utxo_1.sortUTXOs);
};
const fetchTXs = (testnet) => async (address, confirmations) => {
    const url = `${endpoint(testnet).replace(/\/$/, "")}/address/transactions/${address}`;
    const { data } = await axios_1.default.get(url, {
        timeout: timeout_1.DEFAULT_TIMEOUT,
    });
    const received = [];
    for (const tx of data.txs) {
        for (let i = 0; i < tx.vout.length; i++) {
            const vout = tx.vout[i];
            if (vout.scriptPubKey.addresses.indexOf(address) >= 0) {
                received.push({
                    txHash: tx.txid,
                    amount: utxo_1.fixValue(parseFloat(vout.value), 8),
                    vOut: i,
                    confirmations: tx.confirmations,
                });
            }
        }
    }
    return received
        .filter((utxo) => confirmations === 0 || utxo.confirmations >= confirmations)
        .sort(utxo_1.sortUTXOs);
};
exports.broadcastTransaction = (testnet) => async (txHex) => {
    const url = `${endpoint(testnet).replace(/\/$/, "")}/rawtransactions/sendRawTransaction`;
    const response = await axios_1.default.post(url, { hexes: [txHex] }, { timeout: timeout_1.DEFAULT_TIMEOUT });
    if (response.data.error) {
        throw new Error(response.data.error);
    }
    return response.data[0];
};
exports.BitcoinDotCom = {
    fetchUTXO,
    fetchUTXOs,
    fetchTXs,
    broadcastTransaction: exports.broadcastTransaction,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYml0Y29pbkRvdENvbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tb24vYXBpcy9iaXRjb2luRG90Q29tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUEwQjtBQUUxQix5Q0FBOEU7QUFFOUUsdUNBQTRDO0FBcUQ1QyxNQUFNLFFBQVEsR0FBRyxDQUFDLE9BQWdCLEVBQUUsRUFBRSxDQUNsQyxPQUFPLENBQUMsQ0FBQyxDQUFDLCtCQUErQixDQUFDLENBQUMsQ0FBQyw4QkFBOEIsQ0FBQztBQUUvRSxNQUFNLFNBQVMsR0FBRyxDQUFDLE9BQWdCLEVBQUUsRUFBRSxDQUFDLEtBQUssRUFDekMsTUFBYyxFQUNkLElBQVksRUFDQyxFQUFFO0lBQ2YsTUFBTSxHQUFHLEdBQUcsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUNwQyxLQUFLLEVBQ0wsRUFBRSxDQUNMLHdCQUF3QixNQUFNLEVBQUUsQ0FBQztJQUVsQyxNQUFNLFFBQVEsR0FBRyxNQUFNLGVBQUssQ0FBQyxHQUFHLENBQW1CLEdBQUcsR0FBRyxFQUFFLEVBQUU7UUFDekQsT0FBTyxFQUFFLHlCQUFlO0tBQzNCLENBQUMsQ0FBQztJQUVILE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFFM0IsT0FBTyxjQUFPLENBQ1Y7UUFDSSxNQUFNO1FBQ04sTUFBTSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUN6QyxpQ0FBaUM7UUFDakMsSUFBSTtRQUNKLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYTtLQUNwQyxFQUNELENBQUMsQ0FDSixDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBZUYsTUFBTSxVQUFVLEdBQUcsQ0FBQyxPQUFnQixFQUFFLEVBQUUsQ0FBQyxLQUFLLEVBQzFDLE9BQWUsRUFDZixhQUFxQixFQUNHLEVBQUU7SUFDMUIs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