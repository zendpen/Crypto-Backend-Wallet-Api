/// <reference types="node" />
import { PromiEvent } from "./lib/promiEvent";
import { Asset, HandlerClass, Value } from "./types/types";
export { UTXO } from "./lib/utxo";
interface ConstructorOptions {
    network?: string;
    defaultAsset?: Asset;
    extraHandlers?: readonly HandlerClass[];
}
export default class CryptoAccount {
    static readonly newPrivateKey: () => any;
    private readonly handlers;
    private readonly privateKey;
    private readonly network;
    private readonly defaultAsset;
    private readonly constructorOptions;
    private sharedState;
    constructor(privateKey: string | Buffer, options?: ConstructorOptions & {
        [key: string]: any;
    });
    readonly registerHandler: (handlerClass: HandlerClass, priorityIn?: number | undefined) => void;
    readonly address: <Options extends {} = {}>(assetIn?: string | object | undefined, options?: Options | undefined) => Promise<string>;
    readonly getBalance: <T = number, Options extends {
        address?: string | undefined;
        bn?: (new (v: string) => T) | undefined;
    } = {}>(assetIn?: string | object | undefined, options?: Options | undefined) => Promise<T>;
    readonly balanceOf: <T = number, Options extends {
        address?: string | undefined;
        bn?: (new (v: string) => T) | undefined;
    } = {}>(assetIn?: string | object | undefined, options?: Options | undefined) => Promise<T>;
    readonly getBalanceInSats: <T = number, Options extends {
        address?: string | undefined;
        bn?: (new (v: string) => T) | undefined;
    } = {}>(assetIn?: string | object | undefined, options?: Options | undefined) => Promise<T>;
    readonly balanceOfInSats: <T = number, Options extends {
        address?: string | undefined;
        bn?: (new (v: string) => T) | undefined;
    } = {}>(assetIn?: string | object | undefined, options?: Options | undefined) => Promise<T>;
    readonly send: <Options extends {} = {}>(to: string, value: Value, assetIn?: string | object | undefined, options?: Options | undefined) => PromiEvent<string>;
    readonly sendSats: <Options extends {} = {}>(to: string, value: Value, assetIn?: string | object | undefined, options?: Options | undefined) => PromiEvent<string>;
    private readonly deferHandler;
    private readonly findHandler;
}
