import * as bitcoin from "bitgo-utxo-lib";
import BigNumber from "bignumber.js";
const buildUTXO = async (network, privateKey, changeAddress, toAddress, valueIn, utxos, options) => {
    const fees = new BigNumber(options && options.fee !== undefined ? options.fee : 10000);
    const value = options && options.subtractFee ? valueIn.minus(fees) : valueIn;
    if (value.lt(0)) {
        throw new Error(`Unable to include fee in value, fee exceeds value (${fees.toFixed()} > ${valueIn.toFixed()})`);
    }
    const tx = new bitcoin.TransactionBuilder(network);
    if (options && options.version) {
        tx.setVersion(options.version);
    }
    if (options && options.versionGroupID) {
        tx.setVersionGroupId(0xf5b9230b);
    }
    if (options && options.expiryHeight) {
        tx.setExpiryHeight(options.expiryHeight);
    }
    if (options && options.lockTime) {
        tx.setLockTime(options.lockTime);
    }
    // Only use the required utxos
    const [usedUTXOs, sum] = utxos.reduce(([utxoAcc, total], utxo) => total.lt(value.plus(fees))
        ? [[...utxoAcc, utxo], total.plus(utxo.amount)]
        : [utxoAcc, total], [[], new BigNumber(0)]);
    if (sum.lt(value.plus(fees))) {
        throw new Error("Insufficient balance to broadcast transaction");
    }
    // Add all inputs
    usedUTXOs.map((utxo) => {
        tx.addInput(utxo.txHash, utxo.vOut);
    });
    const change = sum.minus(value).minus(fees);
    // Add outputs
    tx.addOutput(toAddress, value.toNumber());
    if (change.gt(0)) {
        tx.addOutput(changeAddress, change.toNumber());
    }
    // Sign inputs
    usedUTXOs.map((utxo, i) => {
        tx.sign(i, privateKey, "", options && options.signFlag !== undefined ? options.signFlag : null, utxo.amount);
    });
    return tx.build();
};
const loadPrivateKey = (network, privateKey) => {
    return bitcoin.ECPair.fromPrivateKeyBuffer(Buffer.from(privateKey, "hex"), network);
};
export const BitgoUTXOLib = {
    buildUTXO,
    loadPrivateKey,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYml0Z29VdHhvTGliLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1vbi9saWJyYXJpZXMvYml0Z29VdHhvTGliLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxPQUFPLE1BQU0sZ0JBQWdCLENBQUM7QUFFMUMsT0FBTyxTQUFTLE1BQU0sY0FBYyxDQUFDO0FBSXJDLE1BQU0sU0FBUyxHQUFHLEtBQUssRUFDbkIsT0FBd0MsRUFDeEMsVUFBZSxFQUNmLGFBQXFCLEVBQ3JCLFNBQWlCLEVBQ2pCLE9BQWtCLEVBQ2xCLEtBQWEsRUFDYixPQVFDLEVBQytCLEVBQUU7SUFDbEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxTQUFTLENBQ3RCLE9BQU8sSUFBSSxPQUFPLENBQUMsR0FBRyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUM3RCxDQUFDO0lBRUYsTUFBTSxLQUFLLEdBQ1AsT0FBTyxJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUNuRSxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDYixNQUFNLElBQUksS0FBSyxDQUNYLHNEQUFzRCxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQ2pHLENBQUM7S0FDTDtJQUVELE1BQU0sRUFBRSxHQUFHLElBQUksT0FBTyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7UUFDNUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDbEM7SUFDRCxJQUFJLE9BQU8sSUFBSSxPQUFP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