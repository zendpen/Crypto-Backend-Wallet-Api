import { extractError } from "../lib/retry";
// import { List } from "immutable";
export const testEndpoints = async (t, endpoints, expectedError) => {
    let expectedResult = null;
    for (let i = 0; i < endpoints.length; i++) {
        const endpoint = endpoints[i];
        if (!endpoint) {
            continue;
        }
        try {
            const result = await endpoint();
            // console.log("result", result);
            // try {
            //     if (Array.isArray(result)) {
            //         result = List(result).sortBy(x => x.txid).toArray();
            //     }
            // } catch (error) {
            //     // ignore error
            // }
            expectedResult = expectedResult || result;
            t.deepEqual(result, expectedResult, `Comparison failed for endpoint #${i}`);
        }
        catch (error) {
            // tslint:disable-next-line: no-object-mutation
            error.message = extractError(error);
            if (expectedError &&
                // Check if error message matches expected error
                ((error.message && error.message.match(expectedError)) ||
                    // Check if request URL matches expected error
                    (error.response &&
                        error.config &&
                        typeof error.response.config.url === "string" &&
                        error.response.config.url.match(expectedError)))) {
                continue;
            }
            console.log("error.response.data", error.response && error.response.data);
            // if (error.message.match(/Request failed with status code 503/)) {
            //     continue;
            // }
            throw error;
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY1V0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NwZWMvc3BlY1V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFNUMsb0NBQW9DO0FBRXBDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxLQUFLLEVBQzlCLENBQTRCLEVBQzVCLFNBQTBELEVBQzFELGFBQXNCLEVBQ3hCLEVBQUU7SUFDQSxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUM7SUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDdkMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDWCxTQUFTO1NBQ1o7UUFDRCxJQUFJO1lBQ0EsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLEVBQUUsQ0FBQztZQUNoQyxpQ0FBaUM7WUFDakMsUUFBUTtZQUNSLG1DQUFtQztZQUNuQywrREFBK0Q7WUFDL0QsUUFBUTtZQUNSLG9CQUFvQjtZQUNwQixzQkFBc0I7WUFDdEIsSUFBSTtZQUNKLGNBQWMsR0FBRyxjQUFjLElBQUksTUFBTSxDQUFDO1lBQzFDLENBQUMsQ0FBQyxTQUFTLENBQ1AsTUFBTSxFQUNOLGNBQWMsRUFDZCxtQ0FBbUMsQ0FBQyxFQUFFLENBQ3pDLENBQUM7U0FDTDtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ1osK0NBQStDO1lBQy9DLEtBQUssQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3BDLElBQ0ksYUFBYTtnQkFDYixnREFBZ0Q7Z0JBQ2hELENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO29CQUNsRCw4Q0FBOEM7b0JBQzlDLENBQUMsS0FBSyxDQUFDLFFBQVE7d0JBQ1gsS0FBSyxDQUFDLE1BQU07d0JBQ1osT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssUUFBUTt3QkFDN0MsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQzFEO2dCQUNFLFNBQVM7YUFDWjtZQUNELE9BQU8sQ0FBQyxHQUFHLENBQ1AscUJBQXFCLEVBQ3JCLEtBQUssQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ3hDLENBQUM7WUFDRixvRUFBb0U7WUFDcEUsZ0JBQWdCO1lBQ2hCLElBQUk7WUFDSixNQUFNLEtBQUssQ0FBQztTQUNmO0tBQ0o7QUFDTCxDQUFDLENBQUMifQ==