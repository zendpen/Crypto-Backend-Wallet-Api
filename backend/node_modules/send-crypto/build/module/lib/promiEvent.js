// Modified from web3-core-method
/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file PromiEvent.js
 * @author Fabian Vogelsteller <fabian@ethereum.org>, Samuel Furter <samuel@ethereum.org>
 * @date 2018
 */
// tslint:disable: no-any
import { EventEmitter } from "events";
class InternalPromiEvent {
    /**
     * @constructor
     */
    constructor() {
        // tslint:disable-next-line: promise-must-complete
        this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
        this.eventEmitter = new EventEmitter();
        return new Proxy(this, {
            get: this.proxyHandler,
        });
    }
    /**
     * Proxy handler to call the promise or eventEmitter methods
     */
    proxyHandler(target, name) {
        if (name === "resolve" || name === "reject") {
            return target[name];
        }
        if (name === "then") {
            return target.promise.then.bind(target.promise);
        }
        if (name === "catch") {
            return target.promise.catch.bind(target.promise);
        }
        if (target.eventEmitter[name]) {
            return target.eventEmitter[name];
        }
    }
}
export const newPromiEvent = () => new InternalPromiEvent();
export const forwardEvents = (src, dest, filterFn = (_name) => true) => {
    // const forwardEmitterNewListener = (eventName: string, listener: (...args: any[]) => void) => {
    //     if (filterFn(eventName) && listener.name.indexOf("__forward_emitter_") !== 0) {
    //         console.log(`Forwarding ${eventName} Listener:`);
    //         console.log(listener);
    //         src.on(eventName, listener);
    //         src.on("transactionHash", (txHash) => { console.log(`Got transaction hash on src`); });
    //     } else {
    //         console.log("Can't forward PromiEvent event!");
    //     }
    // };
    // const forwardEmitterRemoveListener = (eventName: string, listener: (...args: any[]) => void) => {
    //     src.removeListener(eventName, listener);
    // };
    // // Listeners bound to the destination emitter should be bound to the source emitter.
    // dest.on("newListener", forwardEmitterNewListener);
    // // When a listener is removed from the destination emitter, remove it from the source emitter
    // // (otherwise it will continue to be called).
    // dest.on("removeListener", forwardEmitterRemoveListener);
    // Until the above is fixed, we manually forward each event name:
    src.on("transactionHash", (eventReceipt) => {
        dest.emit("transactionHash", eventReceipt);
    });
    src.on("receipt", (eventReceipt) => {
        dest.emit("receipt", eventReceipt);
    });
    src.on("confirmation", (confNumber, eventReceipt) => {
        dest.emit("confirmation", confNumber, eventReceipt);
    });
    src.on("error", (error) => {
        dest.emit("error", error);
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbWlFdmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvcHJvbWlFdmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQ0FBaUM7QUFFakM7Ozs7Ozs7Ozs7Ozs7OztFQWVFO0FBQ0Y7Ozs7R0FJRztBQUVILHlCQUF5QjtBQUV6QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR3RDLE1BQU0sa0JBQWtCO0lBa0NwQjs7T0FFRztJQUNIO1FBQ0ksa0RBQWtEO1FBQ2xELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDOUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7WUFDdkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFdkMsT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFDbkIsR0FBRyxFQUFFLElBQUksQ0FBQyxZQUFZO1NBQ3pCLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7T0FFRztJQUNJLFlBQVksQ0FBQyxNQUFxQixFQUFFLElBQVk7UUFDbkQsSUFBSSxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDekMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdkI7UUFFRCxJQUFJLElBQUksS0FBSyxNQUFNLEVBQUU7WUFDakIsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ25EO1FBRUQsSUFBSSxJQUFJLEtBQUssT0FBTyxFQUFFO1lBQ2xCLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNwRDtRQUVELElBQUssTUFBYyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNwQyxPQUFRLE1BQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0M7SUFDTCxDQUFDO0NBQ0o7QUFJRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsR0FBTSxFQUFFLENBQ2pDLElBQUksa0JBQWtCLEVBQXNCLENBQUM7QUFFakQsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQ3pCLEdBQWtCLEVBQ2xCLElBQW1CLEVBQ25CLFdBQVcsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUFDLElBQUksRUFDcEMsRUFBRTtJQUNBLGlHQUFpRztJQUNqRyxzRkFBc0Y7SUFDdEYsNERBQTREO0lBQzVELGlDQUFpQztJQUNqQyx1Q0FBdUM7SUFDdkMsa0dBQWtHO0lBQ2xHLGVBQWU7SUFDZiwwREFBMEQ7SUFDMUQsUUFBUTtJQUNSLEtBQUs7SUFFTCxvR0FBb0c7SUFDcEcsK0NBQStDO0lBQy9DLEtBQUs7SUFFTCx1RkFBdUY7SUFDdkYscURBQXFEO0lBRXJELGdHQUFnRztJQUNoRyxnREFBZ0Q7SUFDaEQsMkRBQTJEO0lBRTNELGlFQUFpRTtJQUNqRSxHQUFHLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsWUFBb0IsRUFBRSxFQUFFO1FBQy9DLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDLENBQUM7SUFDSCxHQUFHLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFlBQWdDLEVBQUUsRUFBRTtRQUNuRCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNILEdBQUcsQ0FBQyxFQUFFLENBQ0YsY0FBYyxFQUNkLENBQUMsVUFBa0IsRUFBRSxZQUFnQyxFQUFFLEVBQUU7UUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3hELENBQUMsQ0FDSixDQUFDO0lBQ0YsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFZLEVBQUUsRUFBRTtRQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyJ9