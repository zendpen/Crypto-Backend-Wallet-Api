import * as bitcoin from "bitgo-utxo-lib";
import BigNumber from "bignumber.js";
import { List } from "immutable";
import { Blockchair } from "../../common/apis/blockchair";
import { Blockstream } from "../../common/apis/blockstream";
import { Sochain } from "../../common/apis/sochain";
import { BitgoUTXOLib } from "../../common/libraries/bitgoUtxoLib";
import { subscribeToConfirmations } from "../../lib/confirmations";
import { newPromiEvent } from "../../lib/promiEvent";
import { fallback, retryNTimes } from "../../lib/retry";
import { shuffleArray } from "../../lib/utils";
export const _apiFallbacks = {
    fetchUTXO: (testnet, txHash, vOut) => [
        ...shuffleArray(() => Blockstream.fetchUTXO(testnet)(txHash, vOut), () => Blockchair.fetchUTXO(testnet
            ? Blockchair.networks.BITCOIN_TESTNET
            : Blockchair.networks.BITCOIN)(txHash, vOut)),
    ],
    fetchUTXOs: (testnet, address, confirmations) => [
        ...shuffleArray(() => Blockstream.fetchUTXOs(testnet)(address, confirmations), () => Blockchair.fetchUTXOs(testnet
            ? Blockchair.networks.BITCOIN_TESTNET
            : Blockchair.networks.BITCOIN)(address, confirmations)),
        () => Sochain.fetchUTXOs(testnet ? "BTCTEST" : "BTC")(address, confirmations),
    ],
    fetchTXs: (testnet, address, confirmations = 0) => [
        ...shuffleArray(() => Blockstream.fetchTXs(testnet)(address), () => Blockchair.fetchTXs(testnet
            ? Blockchair.networks.BITCOIN_TESTNET
            : Blockchair.networks.BITCOIN)(address, confirmations), () => Sochain.fetchTXs(testnet ? "BTCTEST" : "BTC")(address, confirmations)),
    ],
    broadcastTransaction: (testnet, hex) => [
        ...shuffleArray(() => Blockstream.broadcastTransaction(testnet)(hex), () => Blockchair.broadcastTransaction(testnet
            ? Blockchair.networks.BITCOIN_TESTNET
            : Blockchair.networks.BITCOIN)(hex)),
        () => Sochain.broadcastTransaction(testnet ? "BTCTEST" : "BTC")(hex),
    ],
};
export class BTCHandler {
    constructor(privateKey, network) {
        this.decimals = 8;
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => typeof asset === "string" &&
            ["BTC", "BITCOIN"].indexOf(asset.toUpperCase()) !== -1;
        this.address = async (asset, options) => this.privateKey.getAddress();
        // Balance
        this.getBalance = async (asset, options) => (await this.getBalanceInSats(asset, options)).dividedBy(new BigNumber(10).exponentiatedBy(this.decimals));
        this.getBalanceInSats = async (asset, options) => {
            const utxos = await BTCHandler.getUTXOs(this.testnet, {
                ...options,
                address: (options && options.address) || (await this.address(asset)),
            });
            return utxos.reduce((sum, utxo) => sum.plus(utxo.amount), new BigNumber(0));
        };
        // Transfer
        this.send = (to, value, asset, options) => this.sendSats(to, value.times(new BigNumber(10).exponentiatedBy(this.decimals)), asset, options);
        this.sendSats = (to, valueIn, asset, options) => {
            const promiEvent = newPromiEvent();
            let txHash;
            let errored;
            (async () => {
                const fromAddress = await this.address(asset);
                const changeAddress = fromAddress;
                const utxos = List(await BTCHandler.getUTXOs(this.testnet, {
                    ...options,
                    address: fromAddress,
                }))
                    .sortBy((utxo) => utxo.amount)
                    .reverse()
                    .toArray();
                const built = await BitgoUTXOLib.buildUTXO(this.testnet
                    ? bitcoin.networks.testnet
                    : bitcoin.networks.bitcoin, this.privateKey, changeAddress, to, valueIn, utxos, options);
                txHash = await retryNTimes(() => fallback(_apiFallbacks.broadcastTransaction(this.testnet, built.toHex())), 3);
                promiEvent.emit("transactionHash", txHash);
                promiEvent.resolve(txHash);
            })().catch((error) => {
                errored = true;
                promiEvent.reject(error);
            });
            subscribeToConfirmations(promiEvent, () => errored, async () => (txHash ? this._getConfirmations(txHash) : 0));
            return promiEvent;
        };
        this._getConfirmations = (txHash) => retryNTimes(async () => (await fallback(
        // Fetch confirmations for first output of transaction.
        _apiFallbacks.fetchUTXO(this.testnet, txHash, 0))).confirmations, 2);
        this.testnet = network !== "mainnet";
        this.privateKey = BitgoUTXOLib.loadPrivateKey(this.testnet ? bitcoin.networks.testnet : bitcoin.networks.bitcoin, privateKey);
    }
}
BTCHandler.getUTXOs = async (testnet, options) => {
    const confirmations = options && options.confirmations !== undefined
        ? options.confirmations
        : 0;
    const endpoints = _apiFallbacks.fetchUTXOs(testnet, options.address, confirmations);
    return retryNTimes(() => fallback(endpoints), 2);
};
BTCHandler.getUTXO = async (testnet, txHash, vOut) => {
    const endpoints = _apiFallbacks.fetchUTXO(testnet, txHash, vOut);
    return retryNTimes(() => fallback(endpoints), 2);
};
BTCHandler.getTransactions = async (testnet, options) => {
    const confirmations = options && options.confirmations !== undefined
        ? options.confirmations
        : 0;
    const endpoints = _apiFallbacks.fetchTXs(testnet, options.address, confirmations);
    return retryNTimes(() => fallback(endpoints), 2);
};
//# sourceMappingURL=data:application/json;base64,