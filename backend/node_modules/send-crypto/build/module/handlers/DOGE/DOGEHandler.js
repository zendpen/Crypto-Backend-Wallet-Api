import { Blockchair } from "../../common/apis/blockchair";
import { Sochain } from "../../common/apis/sochain";
import { fallback, onlyMainnet, retryNTimes } from "../../lib/retry";
import { shuffleArray } from "../../lib/utils";
export const _apiFallbacks = {
    fetchUTXO: (testnet, txHash, vOut) => [
        () => Sochain.fetchUTXO(testnet ? "DOGETEST" : "DOGE")(txHash, vOut),
        ...shuffleArray(onlyMainnet(() => Blockchair.fetchUTXO(Blockchair.networks.DOGECOIN)(txHash, vOut), true)),
    ],
    fetchUTXOs: (testnet, address, confirmations) => [
        () => Sochain.fetchUTXOs(testnet ? "DOGETEST" : "DOGE")(address, confirmations),
        ...shuffleArray(onlyMainnet(() => Blockchair.fetchUTXOs(Blockchair.networks.DOGECOIN)(address, confirmations), testnet)),
    ],
    fetchTXs: (testnet, address, confirmations = 0) => [
        () => Sochain.fetchTXs(testnet ? "DOGETEST" : "DOGE")(address, confirmations),
        ...shuffleArray(onlyMainnet(() => Blockchair.fetchTXs(Blockchair.networks.DOGECOIN)(address, confirmations), testnet)),
    ],
    broadcastTransaction: (testnet, hex) => [
        () => Sochain.broadcastTransaction(testnet ? "DOGETEST" : "DOGE")(hex),
        ...shuffleArray(onlyMainnet(() => Blockchair.broadcastTransaction(Blockchair.networks.DOGECOIN)(hex), testnet)),
    ],
};
export class DOGEHandler {
}
DOGEHandler.getUTXOs = async (testnet, options) => {
    const confirmations = options && options.confirmations !== undefined
        ? options.confirmations
        : 0;
    const endpoints = _apiFallbacks.fetchUTXOs(testnet, options.address, confirmations);
    return retryNTimes(() => fallback(endpoints), 2);
};
DOGEHandler.getUTXO = async (testnet, txHash, vOut) => {
    const endpoints = _apiFallbacks.fetchUTXO(testnet, txHash, vOut);
    return retryNTimes(() => fallback(endpoints), 2);
};
DOGEHandler.getTransactions = async (testnet, options) => {
    const confirmations = options && options.confirmations !== undefined
        ? options.confirmations
        : 0;
    const endpoints = _apiFallbacks.fetchTXs(testnet, options.address, confirmations);
    return retryNTimes(() => fallback(endpoints), 2);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRE9HRUhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaGFuZGxlcnMvRE9HRS9ET0dFSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDMUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUcvQyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUc7SUFDekIsU0FBUyxFQUFFLENBQUMsT0FBZ0IsRUFBRSxNQUFjLEVBQUUsSUFBWSxFQUFFLEVBQUUsQ0FBQztRQUMzRCxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDO1FBQ3BFLEdBQUcsWUFBWSxDQUNYLFdBQVcsQ0FDUCxHQUFHLEVBQUUsQ0FDRCxVQUFVLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQzlDLE1BQU0sRUFDTixJQUFJLENBQ1AsRUFDTCxJQUFJLENBQ1AsQ0FDSjtLQUNKO0lBRUQsVUFBVSxFQUFFLENBQUMsT0FBZ0IsRUFBRSxPQUFlLEVBQUUsYUFBcUIsRUFBRSxFQUFFLENBQUM7UUFDdEUsR0FBRyxFQUFFLENBQ0QsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQzdDLE9BQU8sRUFDUCxhQUFhLENBQ2hCO1FBQ0wsR0FBRyxZQUFZLENBQ1gsV0FBVyxDQUNQLEdBQUcsRUFB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