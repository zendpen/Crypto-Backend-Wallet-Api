import BigNumber from "bignumber.js";
import { forwardEvents, newPromiEvent } from "../../lib/promiEvent";
import { getEndpoint, getNetwork, getTransactionConfig, getWeb3, } from "./ethUtils";
export class ETHHandler {
    constructor(privateKey, network, options, sharedState) {
        this.decimals = 18;
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => typeof asset === "string" &&
            ["ETH", "ETHER", "ETHEREUM"].indexOf(asset.toUpperCase()) !== -1;
        this.address = async (asset, options) => this.unlockedAddress;
        // (await this.sharedState.web3.eth.getAccounts())[0];
        // Balance
        this.getBalance = async (asset, options) => (await this.getBalanceInSats(asset, options)).dividedBy(new BigNumber(10).exponentiatedBy(this.decimals));
        this.getBalanceInSats = async (asset, options) => {
            let atBlock;
            if (options && options.confirmations && options.confirmations > 0) {
                const currentBlock = new BigNumber(await this.sharedState.web3.eth.getBlockNumber());
                atBlock = currentBlock
                    .minus(options.confirmations)
                    .plus(1)
                    .toNumber();
            }
            const address = (options && options.address) || (await this.address(asset));
            return new BigNumber(await this.sharedState.web3.eth.getBalance(address, atBlock));
        };
        // Transfer
        this.send = (to, value, asset, options) => this.sendSats(to, value.times(new BigNumber(10).exponentiatedBy(this.decimals)), asset, options);
        this.sendSats = (to, valueIn, asset, optionsIn) => {
            const promiEvent = newPromiEvent();
            (async () => {
                const options = optionsIn || {};
                let value = valueIn;
                const txOptions = getTransactionConfig(options);
                if (options.subtractFee) {
                    const gasPrice = txOptions.gasPrice ||
                        (await this.sharedState.web3.eth.getGasPrice());
                    const gasLimit = txOptions.gas || 21000;
                    const fee = new BigNumber(gasPrice.toString()).times(gasLimit);
                    if (fee.gt(value)) {
                        throw new Error(`Unable to include fee in value, fee exceeds value (${fee.toFixed()} > ${value.toFixed()})`);
                    }
                    value = value.minus(fee);
                }
                const web3PromiEvent = this.sharedState.web3.eth.sendTransaction({
                    from: await this.address(asset),
                    gas: 21000,
                    ...txOptions,
                    to,
                    value: value.toFixed(),
                });
                forwardEvents(web3PromiEvent, promiEvent);
                web3PromiEvent.then(promiEvent.resolve);
            })().catch((error) => {
                promiEvent.reject(error);
            });
            return promiEvent;
        };
        this.network = getNetwork(network);
        this.privateKey = privateKey;
        const [web3, address] = getWeb3(this.privateKey, getEndpoint(this.network, options && options.ethereumNode, options && options.infuraKey));
        this.unlockedAddress = address;
        sharedState.web3 = web3;
        this.sharedState = sharedState;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRVRISGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9oYW5kbGVycy9FVEgvRVRISGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUM7QUFJckMsT0FBTyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQWMsTUFBTSxzQkFBc0IsQ0FBQztBQUVoRixPQUFPLEVBQ0gsV0FBVyxFQUNYLFVBQVUsRUFDVixvQkFBb0IsRUFDcEIsT0FBTyxHQUNWLE1BQU0sWUFBWSxDQUFDO0FBa0JwQixNQUFNLE9BQU8sVUFBVTtJQWNuQixZQUNJLFVBQWtCLEVBQ2xCLE9BQWUsRUFDZixPQUE0QixFQUM1QixXQUFpQjtRQVpKLGFBQVEsR0FBRyxFQUFFLENBQUM7UUE2Qi9CLG1EQUFtRDtRQUNuQyxpQkFBWSxHQUFHLENBQUMsS0FBWSxFQUFXLEVBQUUsQ0FDckQsT0FBTyxLQUFLLEtBQUssUUFBUTtZQUN6QixDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRXJELFlBQU8sR0FBRyxLQUFLLEVBQzNCLEtBQVksRUFDWixPQUF3QixFQUNULEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQzNDLHNEQUFzRDtRQUV0RCxVQUFVO1FBQ00sZUFBVSxHQUFHLEtBQUssRUFDOUIsS0FBWSxFQUNaLE9BQXdCLEVBQ04sRUFBRSxDQUNwQixDQUFDLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FDbkQsSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDbkQsQ0FBQztRQUVVLHFCQUFnQixHQUFHLEtBQUssRUFDcEMsS0FB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