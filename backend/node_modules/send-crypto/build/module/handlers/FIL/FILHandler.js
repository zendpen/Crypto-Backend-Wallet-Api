import BigNumber from "bignumber.js";
import { Message } from "@glif/filecoin-message";
import Filecoin, { Network as FilNetwork } from "@glif/filecoin-wallet-provider";
import { newPromiEvent } from "../../lib/promiEvent";
import { sleep } from "../../lib/retry";
import { SingleKeyProvider } from "./provider";
export class FILHandler {
    constructor(privateKey, network, options = {}, sharedState) {
        this.decimals = 18;
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => typeof asset === "string" &&
            ["FIL", "FILECOIN"].indexOf(asset.toUpperCase()) !== -1;
        this.address = async (asset, _options = {}) => {
            if (!this.handlesAsset(asset)) {
                throw new Error(`Asset ${asset} not supported.`);
            }
            const accounts = await this.sharedState.filecoin.wallet.getAccounts(0, 1, this.network);
            return accounts[0];
        };
        // Balance
        this.getBalance = async (asset, options = {}) => new BigNumber(await this.sharedState.filecoin.getBalance((options && options.address) || (await this.address(asset))));
        this.getBalanceInSats = async (asset, options = {}) => (await this.getBalance(asset, options)).multipliedBy(new BigNumber(10).exponentiatedBy(this.decimals));
        // Transfer
        this.send = (to, value, asset, options = {}) => this.sendSats(to, value.times(new BigNumber(10).exponentiatedBy(this.decimals)), asset, options);
        this.sendSats = (to, valueIn, asset, options = {}) => {
            const promiEvent = newPromiEvent();
            (async () => {
                const address = await this.address(asset);
                const nonce = await this.sharedState.filecoin.getNonce(address);
                let value = valueIn;
                let message = new Message({
                    to,
                    from: address,
                    value: valueIn,
                    method: 0,
                    gasFeeCap: 0,
                    gasLimit: 0,
                    gasPremium: 0,
                    nonce,
                    params: undefined,
                    ...options,
                });
                message = await this.sharedState.filecoin.gasEstimateMessageGas(message.toLotusType());
                if (options.subtractFee) {
                    const { maxFee: fee, } = await this.sharedState.filecoin.gasEstimateMaxFee(message.toLotusType());
                    if (fee.gt(value)) {
                        throw new Error(`Unable to include fee in value, fee exceeds value (${fee.toFixed()} > ${value.toFixed()})`);
                    }
                    value = value.minus(fee);
                }
                const signed = await this.sharedState.filecoin.wallet.sign(address, message.toLotusType());
                const tx = await this.sharedState.filecoin.sendMessage(signed.Message, signed.Signature.Data);
                const txHash = tx["/"];
                promiEvent.emit("transactionHash", txHash);
                while (true) {
                    const result = await this.sharedState.filecoin.jsonRpcEngine.request("StateSearchMsg", tx);
                    /*
                    {
                        Message: {
                            '/': 'bafy2bzacedtcalpfb5dj3de6jb5lfncqtxw4kia4xotpg3on3p7gcesiwlube'
                        },
                        Receipt: { ExitCode: 0, Return: null, GasUsed: 433268 },
                        ReturnDec: null,
                        TipSet: [
                            {
                            '/': 'bafy2bzacedsqymqnjl2oir7q2rgbwyqscihvebkvr7hfzdq5b2tvcct3cwczy'
                            },
                            {
                            '/': 'bafy2bzacednrjqbsyooob3f76wwct4iupauehvq6wnzrbf6uc4dskptwu4er6'
                            },
                            {
                            '/': 'bafy2bzaceany2in5cadbyf27mecnmzc6ustqfewd5dobxquidzbn3wtnjd52y'
                            }
                        ],
                        Height: 53025
                    }
                    */
                    if (result) {
                        promiEvent.emit("confirmation", 1);
                        break;
                    }
                    await sleep(10 * 1000);
                }
                promiEvent.resolve(txHash);
            })().catch((error) => {
                promiEvent.reject(error);
            });
            return promiEvent;
        };
        const filecoin = new Filecoin(SingleKeyProvider(privateKey), {
            apiAddress: options && options.apiAddress,
            token: options && options.token,
        });
        this.network =
            network === "mainnet" ? FilNetwork.MAIN : FilNetwork.TEST;
        sharedState.filecoin = filecoin;
        this.sharedState = sharedState;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRklMSGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9oYW5kbGVycy9GSUwvRklMSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUM7QUFDckMsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLHdCQUF3QixDQUFDO0FBQzdELE9BQU8sUUFBUSxFQUFFLEVBQUUsT0FBTyxJQUFJLFVBQVUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRWpGLE9BQU8sRUFBRSxhQUFhLEVBQWMsTUFBTSxzQkFBc0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFeEMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBYy9DLE1BQU0sT0FBTyxVQUFVO0lBV25CLFlBQ0ksVUFBa0IsRUFDbEIsT0FBZSxFQUNmLFVBQThCLEVBQUUsRUFDaEMsV0FBaUI7UUFWSixhQUFRLEdBQUcsRUFBRSxDQUFDO1FBd0IvQixtREFBbUQ7UUFDbkMsaUJBQVksR0FBRyxDQUFDLEtBQVksRUFBVyxFQUFFLENBQ3JELE9BQU8sS0FBSyxLQUFLLFFBQVE7WUFDekIsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRTVDLFlBQU8sR0FBRyxLQUFLLEVBQzNCLEtBQVksRUFDWixXQUEyQixFQUFFLEVBQ2QsRUFBRTtZQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDM0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxTQUFTLEtBQUssaUJBQWlCLENBQUMsQ0FBQzthQUNwRDtZQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFD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