import BigNumber from "bignumber.js";
import { forwardEvents, newPromiEvent } from "../../lib/promiEvent";
import { getNetwork, getTransactionConfig } from "../ETH/ethUtils";
import { ERC20ABI } from "./ERC20ABI";
import { ERC20s } from "./ERC20s";
const resolveAsset = (network, assetIn) => {
    if (typeof assetIn !== "object") {
        throw new Error("");
    }
    const asset = assetIn;
    if (asset.address) {
        return { ...asset, address: asset.address };
    }
    else {
        const address = (ERC20s[network] || {})[asset.name || ""];
        if (!address) {
            throw new Error(`Unknown ERC20 token ${asset.name || JSON.stringify(asset)}`);
        }
        return { ...asset, address };
    }
};
export class ERC20Handler {
    constructor(_privateKey, network, _options, sharedState) {
        this._decimals = {};
        // Returns whether or not this can handle the asset
        this.handlesAsset = (asset) => {
            return (typeof asset === "object" &&
                asset.hasOwnProperty("type") &&
                asset.type === "ERC20" &&
                (asset.hasOwnProperty("address") || asset.hasOwnProperty("name")));
        };
        // Address
        this.address = async (asset, options, deferHandler) => deferHandler.address("ETH", options);
        // Balance
        this.getBalance = async (assetIn, options, deferHandler) => {
            const asset = resolveAsset(this.network, assetIn);
            const decimals = await this.decimals(asset);
            return (await this.getBalanceInSats(asset, options, deferHandler)).dividedBy(new BigNumber(10).exponentiatedBy(decimals));
        };
        this.getBalanceInSats = async (assetIn, options, deferHandler) => {
            const asset = resolveAsset(this.network, assetIn);
            const address = (options && options.address) ||
                (deferHandler && (await deferHandler.address("ETH", options))) ||
                "";
            return new BigNumber(await this.getContract(asset).methods.balanceOf(address).call());
        };
        // Transfer
        this.send = (to, valueIn, assetIn, options, deferHandler) => {
            const asset = resolveAsset(this.network, assetIn);
            const promiEvent = newPromiEvent();
            (async () => {
                const contract = this.getContract(asset);
                const method = options.approve
                    ? contract.methods.approve
                    : contract.methods.transfer;
                const call = method(to, valueIn
                    .times(new BigNumber(10).exponentiatedBy(await this.decimals(asset)))
                    .toFixed());
                const config = {
                    from: await deferHandler.address("ETH"),
                    ...getTransactionConfig(options),
                };
                // tslint:disable-next-line: no-object-mutation
                config.gas = await call.estimateGas(config);
                const web3PromiEvent = call.send(config);
                forwardEvents(web3PromiEvent, promiEvent);
                web3PromiEvent.then(promiEvent.resolve);
            })().catch((error) => {
                promiEvent.reject(error);
            });
            return promiEvent;
        };
        this.sendSats = (to, valueIn, assetIn, options, deferHandler) => {
            const asset = resolveAsset(this.network, assetIn);
            const promiEvent = newPromiEvent();
            (async () => {
                const contract = this.getContract(asset);
                const method = options.approve
                    ? contract.methods.approve
                    : contract.methods.transfer;
                const call = method(to, valueIn.toFixed());
                const config = {
                    from: await deferHandler.address("ETH"),
                    ...getTransactionConfig(options),
                };
                // tslint:disable-next-line: no-object-mutation
                config.gas = await call.estimateGas(config);
                const web3PromiEvent = call.send(config);
                forwardEvents(web3PromiEvent, promiEvent);
                web3PromiEvent.then(promiEvent.resolve);
            })().catch((error) => {
                promiEvent.reject(error);
            });
            return promiEvent;
        };
        this.getContract = (asset) => {
            return new this.sharedState.web3.eth.Contract(ERC20ABI, resolveAsset(this.network, asset).address);
        };
        this.decimals = async (asset) => {
            const address = resolveAsset(this.network, asset).address;
            if (this._decimals[address]) {
                return this._decimals[address];
            }
            return this.getContract(asset).methods.decimals().call();
        };
        this.network = getNetwork(network);
        this.sharedState = sharedState;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRVJDMjBIYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2hhbmRsZXJzL0VSQzIwL0VSQzIwSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUM7QUFJckMsT0FBTyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQWMsTUFBTSxzQkFBc0IsQ0FBQztBQUVoRixPQUFPLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBV2xDLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBZSxFQUFFLE9BQWMsRUFBdUIsRUFBRTtJQUMxRSxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtRQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3ZCO0lBQ0QsTUFBTSxLQUFLLEdBQUcsT0FBOEMsQ0FBQztJQUM3RCxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7UUFDZixPQUFPLEVBQUUsR0FBRyxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUMvQztTQUFNO1FBQ0gsTUFBTSxPQUFPLEdBQUcsQ0FBRSxNQUFjLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1YsTUFBTSxJQUFJLEtBQUssQ0FDWCx1QkFBdUIsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQy9ELENBQUM7U0FDTDtRQUNELE9BQU8sRUFBRSxHQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUs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